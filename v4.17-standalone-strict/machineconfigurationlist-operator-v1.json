{
  "description": "MachineConfigurationList is a list of MachineConfiguration",
  "type": "object",
  "required": [
    "items"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "operator.openshift.io/v1"
      ]
    },
    "items": {
      "description": "List of machineconfigurations. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "description": "MachineConfiguration provides information to configure an operator to manage Machine Configuration. \n Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
        "type": [
          "object",
          "null"
        ],
        "required": [
          "spec"
        ],
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "operator.openshift.io/v1"
            ]
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "MachineConfiguration"
            ]
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "annotations": {
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "creationTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              },
              "deletionTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "x-kubernetes-list-type": "set",
                "x-kubernetes-patch-strategy": "merge"
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              },
              "labels": {
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "managedFields": {
                "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "fieldsType": {
                      "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "fieldsV1": {
                      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                      "type": [
                        "object",
                        "null"
                      ]
                    },
                    "manager": {
                      "description": "Manager is an identifier of the workflow managing these fields.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "operation": {
                      "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "subresource": {
                      "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "time": {
                      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "format": "date-time"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-type": "atomic"
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                "type": [
                  "string",
                  "null"
                ]
              },
              "namespace": {
                "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
                "type": [
                  "string",
                  "null"
                ]
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                },
                "x-kubernetes-list-map-keys": [
                  "uid"
                ],
                "x-kubernetes-list-type": "map",
                "x-kubernetes-patch-merge-key": "uid",
                "x-kubernetes-patch-strategy": "merge"
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "selfLink": {
                "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          },
          "spec": {
            "description": "spec is the specification of the desired behavior of the Machine Config Operator",
            "type": "object",
            "properties": {
              "failedRevisionLimit": {
                "description": "failedRevisionLimit is the number of failed static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32"
              },
              "forceRedeploymentReason": {
                "description": "forceRedeploymentReason can be used to force the redeployment of the operand by providing a unique string. This provides a mechanism to kick a previously failed deployment and provide a reason why you think it will work this time instead of failing again on the same config.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "logLevel": {
                "description": "logLevel is an intent based logging for an overall component.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for their operands. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "",
                  "Normal",
                  "Debug",
                  "Trace",
                  "TraceAll"
                ]
              },
              "managedBootImages": {
                "description": "managedBootImages allows configuration for the management of boot images for machine resources within the cluster. This configuration allows users to select resources that should be updated to the latest boot images during cluster upgrades, ensuring that new machines always boot with the current cluster version's boot image. When omitted, no boot images will be updated.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "machineManagers": {
                    "description": "machineManagers can be used to register machine management resources for boot image updates. The Machine Config Operator will watch for changes to this list. Only one entry is permitted per type of machine management resource.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "MachineManager describes a target machine resource that is registered for boot image updates. It stores identifying information such as the resource type and the API Group of the resource. It also provides granular control via the selection field.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "apiGroup",
                        "resource",
                        "selection"
                      ],
                      "properties": {
                        "apiGroup": {
                          "description": "apiGroup is name of the APIGroup that the machine management resource belongs to. The only current valid value is machine.openshift.io. machine.openshift.io means that the machine manager will only register resources that belong to OpenShift machine API group.",
                          "type": "string",
                          "enum": [
                            "machine.openshift.io"
                          ]
                        },
                        "resource": {
                          "description": "resource is the machine management resource's type. The only current valid value is machinesets. machinesets means that the machine manager will only register resources of the kind MachineSet.",
                          "type": "string",
                          "enum": [
                            "machinesets"
                          ]
                        },
                        "selection": {
                          "description": "selection allows granular control of the machine management resources that will be registered for boot image updates.",
                          "type": "object",
                          "required": [
                            "mode"
                          ],
                          "properties": {
                            "mode": {
                              "description": "mode determines how machine managers will be selected for updates. Valid values are All and Partial. All means that every resource matched by the machine manager will be updated. Partial requires specified selector(s) and allows customisation of which resources matched by the machine manager will be updated.",
                              "type": "string",
                              "enum": [
                                "All",
                                "Partial"
                              ]
                            },
                            "partial": {
                              "description": "partial provides label selector(s) that can be used to match machine management resources. Only permitted when mode is set to \"Partial\".",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "machineResourceSelector"
                              ],
                              "properties": {
                                "machineResourceSelector": {
                                  "description": "machineResourceSelector is a label selector that can be used to select machine resources like MachineSets.",
                                  "type": "object",
                                  "properties": {
                                    "matchExpressions": {
                                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                        "type": [
                                          "object",
                                          "null"
                                        ],
                                        "required": [
                                          "key",
                                          "operator"
                                        ],
                                        "properties": {
                                          "key": {
                                            "description": "key is the label key that the selector applies to.",
                                            "type": "string"
                                          },
                                          "operator": {
                                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                            "type": "string"
                                          },
                                          "values": {
                                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                            "type": [
                                              "array",
                                              "null"
                                            ],
                                            "items": {
                                              "type": [
                                                "string",
                                                "null"
                                              ]
                                            },
                                            "x-kubernetes-list-type": "atomic"
                                          }
                                        },
                                        "additionalProperties": false
                                      },
                                      "x-kubernetes-list-type": "atomic"
                                    },
                                    "matchLabels": {
                                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "additionalProperties": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    }
                                  },
                                  "x-kubernetes-map-type": "atomic",
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "x-kubernetes-validations": [
                            {
                              "message": "Partial is required when type is partial, and forbidden otherwise",
                              "rule": "has(self.mode) && self.mode == 'Partial' ?  has(self.partial) : !has(self.partial)"
                            }
                          ],
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "x-kubernetes-list-map-keys": [
                      "resource",
                      "apiGroup"
                    ],
                    "x-kubernetes-list-type": "map"
                  }
                },
                "additionalProperties": false
              },
              "managementState": {
                "description": "managementState indicates whether and how the operator should manage the component",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(Managed|Unmanaged|Force|Removed)$"
              },
              "nodeDisruptionPolicy": {
                "description": "nodeDisruptionPolicy allows an admin to set granular node disruption actions for MachineConfig-based updates, such as drains, service reloads, etc. Specifying this will allow for less downtime when doing small configuration updates to the cluster. This configuration has no effect on cluster upgrades which will still incur node disruption where required.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "files": {
                    "description": "files is a list of MachineConfig file definitions and actions to take to changes on those paths This list supports a maximum of 50 entries.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "maxItems": 50,
                    "items": {
                      "description": "NodeDisruptionPolicySpecFile is a file entry and corresponding actions to take and is used in the NodeDisruptionPolicyConfig object",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "actions",
                        "path"
                      ],
                      "properties": {
                        "actions": {
                          "description": "actions represents the series of commands to be executed on changes to the file at the corresponding file path. Actions will be applied in the order that they are set in this list. If there are other incoming changes to other MachineConfig entries in the same update that require a reboot, the reboot will supercede these actions. Valid actions are Reboot, Drain, Reload, DaemonReload and None. The Reboot action and the None action cannot be used in conjunction with any of the other actions. This list supports a maximum of 10 entries.",
                          "type": "array",
                          "maxItems": 10,
                          "items": {
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "reload": {
                                "description": "reload specifies the service to reload, only valid if type is reload",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "required": [
                                  "serviceName"
                                ],
                                "properties": {
                                  "serviceName": {
                                    "description": "serviceName is the full name (e.g. crio.service) of the service to be reloaded Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                    "type": "string",
                                    "maxLength": 255,
                                    "x-kubernetes-validations": [
                                      {
                                        "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                        "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                      },
                                      {
                                        "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                        "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              "restart": {
                                "description": "restart specifies the service to restart, only valid if type is restart",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "required": [
                                  "serviceName"
                                ],
                                "properties": {
                                  "serviceName": {
                                    "description": "serviceName is the full name (e.g. crio.service) of the service to be restarted Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                    "type": "string",
                                    "maxLength": 255,
                                    "x-kubernetes-validations": [
                                      {
                                        "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                        "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                      },
                                      {
                                        "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                        "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              "type": {
                                "description": "type represents the commands that will be carried out if this NodeDisruptionPolicySpecActionType is executed Valid values are Reboot, Drain, Reload, Restart, DaemonReload and None. reload/restart requires a corresponding service target specified in the reload/restart field. Other values require no further configuration",
                                "type": "string",
                                "enum": [
                                  "Reboot",
                                  "Drain",
                                  "Reload",
                                  "Restart",
                                  "DaemonReload",
                                  "None"
                                ]
                              }
                            },
                            "x-kubernetes-validations": [
                              {
                                "message": "reload is required when type is Reload, and forbidden otherwise",
                                "rule": "has(self.type) && self.type == 'Reload' ? has(self.reload) : !has(self.reload)"
                              },
                              {
                                "message": "restart is required when type is Restart, and forbidden otherwise",
                                "rule": "has(self.type) && self.type == 'Restart' ? has(self.restart) : !has(self.restart)"
                              }
                            ],
                            "additionalProperties": false
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-validations": [
                            {
                              "message": "Reboot action can only be specified standalone, as it will override any other actions",
                              "rule": "self.exists(x, x.type=='Reboot') ? size(self) == 1 : true"
                            },
                            {
                              "message": "None action can only be specified standalone, as it will override any other actions",
                              "rule": "self.exists(x, x.type=='None') ? size(self) == 1 : true"
                            }
                          ]
                        },
                        "path": {
                          "description": "path is the location of a file being managed through a MachineConfig. The Actions in the policy will apply to changes to the file at this path.",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "x-kubernetes-list-map-keys": [
                      "path"
                    ],
                    "x-kubernetes-list-type": "map"
                  },
                  "sshkey": {
                    "description": "sshkey maps to the ignition.sshkeys field in the MachineConfig object, definition an action for this will apply to all sshkey changes in the cluster",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "actions"
                    ],
                    "properties": {
                      "actions": {
                        "description": "actions represents the series of commands to be executed on changes to the file at the corresponding file path. Actions will be applied in the order that they are set in this list. If there are other incoming changes to other MachineConfig entries in the same update that require a reboot, the reboot will supercede these actions. Valid actions are Reboot, Drain, Reload, DaemonReload and None. The Reboot action and the None action cannot be used in conjunction with any of the other actions. This list supports a maximum of 10 entries.",
                        "type": "array",
                        "maxItems": 10,
                        "items": {
                          "type": [
                            "object",
                            "null"
                          ],
                          "required": [
                            "type"
                          ],
                          "properties": {
                            "reload": {
                              "description": "reload specifies the service to reload, only valid if type is reload",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "serviceName"
                              ],
                              "properties": {
                                "serviceName": {
                                  "description": "serviceName is the full name (e.g. crio.service) of the service to be reloaded Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                  "type": "string",
                                  "maxLength": 255,
                                  "x-kubernetes-validations": [
                                    {
                                      "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                      "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                    },
                                    {
                                      "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                      "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            },
                            "restart": {
                              "description": "restart specifies the service to restart, only valid if type is restart",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "serviceName"
                              ],
                              "properties": {
                                "serviceName": {
                                  "description": "serviceName is the full name (e.g. crio.service) of the service to be restarted Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                  "type": "string",
                                  "maxLength": 255,
                                  "x-kubernetes-validations": [
                                    {
                                      "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                      "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                    },
                                    {
                                      "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                      "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                    }
                                  ]
                                }
                              },
                              "additionalProperties": false
                            },
                            "type": {
                              "description": "type represents the commands that will be carried out if this NodeDisruptionPolicySpecActionType is executed Valid values are Reboot, Drain, Reload, Restart, DaemonReload and None. reload/restart requires a corresponding service target specified in the reload/restart field. Other values require no further configuration",
                              "type": "string",
                              "enum": [
                                "Reboot",
                                "Drain",
                                "Reload",
                                "Restart",
                                "DaemonReload",
                                "None"
                              ]
                            }
                          },
                          "x-kubernetes-validations": [
                            {
                              "message": "reload is required when type is Reload, and forbidden otherwise",
                              "rule": "has(self.type) && self.type == 'Reload' ? has(self.reload) : !has(self.reload)"
                            },
                            {
                              "message": "restart is required when type is Restart, and forbidden otherwise",
                              "rule": "has(self.type) && self.type == 'Restart' ? has(self.restart) : !has(self.restart)"
                            }
                          ],
                          "additionalProperties": false
                        },
                        "x-kubernetes-list-type": "atomic",
                        "x-kubernetes-validations": [
                          {
                            "message": "Reboot action can only be specified standalone, as it will override any other actions",
                            "rule": "self.exists(x, x.type=='Reboot') ? size(self) == 1 : true"
                          },
                          {
                            "message": "None action can only be specified standalone, as it will override any other actions",
                            "rule": "self.exists(x, x.type=='None') ? size(self) == 1 : true"
                          }
                        ]
                      }
                    },
                    "additionalProperties": false
                  },
                  "units": {
                    "description": "units is a list MachineConfig unit definitions and actions to take on changes to those services This list supports a maximum of 50 entries.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "maxItems": 50,
                    "items": {
                      "description": "NodeDisruptionPolicySpecUnit is a systemd unit name and corresponding actions to take and is used in the NodeDisruptionPolicyConfig object",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "actions",
                        "name"
                      ],
                      "properties": {
                        "actions": {
                          "description": "actions represents the series of commands to be executed on changes to the file at the corresponding file path. Actions will be applied in the order that they are set in this list. If there are other incoming changes to other MachineConfig entries in the same update that require a reboot, the reboot will supercede these actions. Valid actions are Reboot, Drain, Reload, DaemonReload and None. The Reboot action and the None action cannot be used in conjunction with any of the other actions. This list supports a maximum of 10 entries.",
                          "type": "array",
                          "maxItems": 10,
                          "items": {
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "reload": {
                                "description": "reload specifies the service to reload, only valid if type is reload",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "required": [
                                  "serviceName"
                                ],
                                "properties": {
                                  "serviceName": {
                                    "description": "serviceName is the full name (e.g. crio.service) of the service to be reloaded Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                    "type": "string",
                                    "maxLength": 255,
                                    "x-kubernetes-validations": [
                                      {
                                        "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                        "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                      },
                                      {
                                        "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                        "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              "restart": {
                                "description": "restart specifies the service to restart, only valid if type is restart",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "required": [
                                  "serviceName"
                                ],
                                "properties": {
                                  "serviceName": {
                                    "description": "serviceName is the full name (e.g. crio.service) of the service to be restarted Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                    "type": "string",
                                    "maxLength": 255,
                                    "x-kubernetes-validations": [
                                      {
                                        "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                        "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                      },
                                      {
                                        "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                        "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                      }
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              "type": {
                                "description": "type represents the commands that will be carried out if this NodeDisruptionPolicySpecActionType is executed Valid values are Reboot, Drain, Reload, Restart, DaemonReload and None. reload/restart requires a corresponding service target specified in the reload/restart field. Other values require no further configuration",
                                "type": "string",
                                "enum": [
                                  "Reboot",
                                  "Drain",
                                  "Reload",
                                  "Restart",
                                  "DaemonReload",
                                  "None"
                                ]
                              }
                            },
                            "x-kubernetes-validations": [
                              {
                                "message": "reload is required when type is Reload, and forbidden otherwise",
                                "rule": "has(self.type) && self.type == 'Reload' ? has(self.reload) : !has(self.reload)"
                              },
                              {
                                "message": "restart is required when type is Restart, and forbidden otherwise",
                                "rule": "has(self.type) && self.type == 'Restart' ? has(self.restart) : !has(self.restart)"
                              }
                            ],
                            "additionalProperties": false
                          },
                          "x-kubernetes-list-type": "atomic",
                          "x-kubernetes-validations": [
                            {
                              "message": "Reboot action can only be specified standalone, as it will override any other actions",
                              "rule": "self.exists(x, x.type=='Reboot') ? size(self) == 1 : true"
                            },
                            {
                              "message": "None action can only be specified standalone, as it will override any other actions",
                              "rule": "self.exists(x, x.type=='None') ? size(self) == 1 : true"
                            }
                          ]
                        },
                        "name": {
                          "description": "name represents the service name of a systemd service managed through a MachineConfig Actions specified will be applied for changes to the named service. Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                          "type": "string",
                          "maxLength": 255,
                          "x-kubernetes-validations": [
                            {
                              "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                              "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                            },
                            {
                              "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                              "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                            }
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "x-kubernetes-list-map-keys": [
                      "name"
                    ],
                    "x-kubernetes-list-type": "map"
                  }
                },
                "additionalProperties": false
              },
              "observedConfig": {
                "description": "observedConfig holds a sparse config that controller has observed from the cluster state.  It exists in spec because it is an input to the level for the operator",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "operatorLogLevel": {
                "description": "operatorLogLevel is an intent based logging for the operator itself.  It does not give fine grained control, but it is a simple way to manage coarse grained logging choices that operators have to interpret for themselves. \n Valid values are: \"Normal\", \"Debug\", \"Trace\", \"TraceAll\". Defaults to \"Normal\".",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "",
                  "Normal",
                  "Debug",
                  "Trace",
                  "TraceAll"
                ]
              },
              "succeededRevisionLimit": {
                "description": "succeededRevisionLimit is the number of successful static pod installer revisions to keep on disk and in the api -1 = unlimited, 0 or unset = 5 (default)",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int32"
              },
              "unsupportedConfigOverrides": {
                "description": "unsupportedConfigOverrides overrides the final configuration that was computed by the operator. Red Hat does not support the use of this field. Misuse of this field could lead to unexpected behavior or conflict with other configuration options. Seek guidance from the Red Hat support before using this field. Use of this property blocks cluster upgrades, it must be removed before upgrading your cluster.",
                "x-kubernetes-preserve-unknown-fields": true
              }
            },
            "additionalProperties": false
          },
          "status": {
            "description": "status is the most recently observed status of the Machine Config Operator",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "conditions": {
                "description": "conditions is a list of conditions and their status",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, \n type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "lastTransitionTime",
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                      "type": "string",
                      "maxLength": 32768
                    },
                    "observedGeneration": {
                      "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "int64",
                      "minimum": 0
                    },
                    "reason": {
                      "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                      "type": "string",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                    },
                    "status": {
                      "description": "status of the condition, one of True, False, Unknown.",
                      "type": "string",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ]
                    },
                    "type": {
                      "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                      "type": "string",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                    }
                  },
                  "additionalProperties": false
                },
                "x-kubernetes-list-map-keys": [
                  "type"
                ],
                "x-kubernetes-list-type": "map"
              },
              "nodeDisruptionPolicyStatus": {
                "description": "nodeDisruptionPolicyStatus status reflects what the latest cluster-validated policies are, and will be used by the Machine Config Daemon during future node updates.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "clusterPolicies": {
                    "description": "clusterPolicies is a merge of cluster default and user provided node disruption policies.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "files": {
                        "description": "files is a list of MachineConfig file definitions and actions to take to changes on those paths",
                        "type": [
                          "array",
                          "null"
                        ],
                        "maxItems": 100,
                        "items": {
                          "description": "NodeDisruptionPolicyStatusFile is a file entry and corresponding actions to take and is used in the NodeDisruptionPolicyClusterStatus object",
                          "type": [
                            "object",
                            "null"
                          ],
                          "required": [
                            "actions",
                            "path"
                          ],
                          "properties": {
                            "actions": {
                              "description": "actions represents the series of commands to be executed on changes to the file at the corresponding file path. Actions will be applied in the order that they are set in this list. If there are other incoming changes to other MachineConfig entries in the same update that require a reboot, the reboot will supercede these actions. Valid actions are Reboot, Drain, Reload, DaemonReload and None. The Reboot action and the None action cannot be used in conjunction with any of the other actions. This list supports a maximum of 10 entries.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "reload": {
                                    "description": "reload specifies the service to reload, only valid if type is reload",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "required": [
                                      "serviceName"
                                    ],
                                    "properties": {
                                      "serviceName": {
                                        "description": "serviceName is the full name (e.g. crio.service) of the service to be reloaded Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                        "type": "string",
                                        "maxLength": 255,
                                        "x-kubernetes-validations": [
                                          {
                                            "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                            "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                          },
                                          {
                                            "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                            "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "restart": {
                                    "description": "restart specifies the service to restart, only valid if type is restart",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "required": [
                                      "serviceName"
                                    ],
                                    "properties": {
                                      "serviceName": {
                                        "description": "serviceName is the full name (e.g. crio.service) of the service to be restarted Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                        "type": "string",
                                        "maxLength": 255,
                                        "x-kubernetes-validations": [
                                          {
                                            "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                            "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                          },
                                          {
                                            "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                            "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "type": {
                                    "description": "type represents the commands that will be carried out if this NodeDisruptionPolicyStatusActionType is executed Valid values are Reboot, Drain, Reload, Restart, DaemonReload, None and Special. reload/restart requires a corresponding service target specified in the reload/restart field. Other values require no further configuration",
                                    "type": "string",
                                    "enum": [
                                      "Reboot",
                                      "Drain",
                                      "Reload",
                                      "Restart",
                                      "DaemonReload",
                                      "None",
                                      "Special"
                                    ]
                                  }
                                },
                                "x-kubernetes-validations": [
                                  {
                                    "message": "reload is required when type is Reload, and forbidden otherwise",
                                    "rule": "has(self.type) && self.type == 'Reload' ? has(self.reload) : !has(self.reload)"
                                  },
                                  {
                                    "message": "restart is required when type is Restart, and forbidden otherwise",
                                    "rule": "has(self.type) && self.type == 'Restart' ? has(self.restart) : !has(self.restart)"
                                  }
                                ],
                                "additionalProperties": false
                              },
                              "x-kubernetes-list-type": "atomic",
                              "x-kubernetes-validations": [
                                {
                                  "message": "Reboot action can only be specified standalone, as it will override any other actions",
                                  "rule": "self.exists(x, x.type=='Reboot') ? size(self) == 1 : true"
                                },
                                {
                                  "message": "None action can only be specified standalone, as it will override any other actions",
                                  "rule": "self.exists(x, x.type=='None') ? size(self) == 1 : true"
                                }
                              ]
                            },
                            "path": {
                              "description": "path is the location of a file being managed through a MachineConfig. The Actions in the policy will apply to changes to the file at this path.",
                              "type": "string"
                            }
                          },
                          "additionalProperties": false
                        },
                        "x-kubernetes-list-map-keys": [
                          "path"
                        ],
                        "x-kubernetes-list-type": "map"
                      },
                      "sshkey": {
                        "description": "sshkey is the overall sshkey MachineConfig definition",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "actions"
                        ],
                        "properties": {
                          "actions": {
                            "description": "actions represents the series of commands to be executed on changes to the file at the corresponding file path. Actions will be applied in the order that they are set in this list. If there are other incoming changes to other MachineConfig entries in the same update that require a reboot, the reboot will supercede these actions. Valid actions are Reboot, Drain, Reload, DaemonReload and None. The Reboot action and the None action cannot be used in conjunction with any of the other actions. This list supports a maximum of 10 entries.",
                            "type": "array",
                            "maxItems": 10,
                            "items": {
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "reload": {
                                  "description": "reload specifies the service to reload, only valid if type is reload",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "required": [
                                    "serviceName"
                                  ],
                                  "properties": {
                                    "serviceName": {
                                      "description": "serviceName is the full name (e.g. crio.service) of the service to be reloaded Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                      "type": "string",
                                      "maxLength": 255,
                                      "x-kubernetes-validations": [
                                        {
                                          "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                          "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                        },
                                        {
                                          "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                          "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "restart": {
                                  "description": "restart specifies the service to restart, only valid if type is restart",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "required": [
                                    "serviceName"
                                  ],
                                  "properties": {
                                    "serviceName": {
                                      "description": "serviceName is the full name (e.g. crio.service) of the service to be restarted Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                      "type": "string",
                                      "maxLength": 255,
                                      "x-kubernetes-validations": [
                                        {
                                          "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                          "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                        },
                                        {
                                          "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                          "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                        }
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "type": {
                                  "description": "type represents the commands that will be carried out if this NodeDisruptionPolicyStatusActionType is executed Valid values are Reboot, Drain, Reload, Restart, DaemonReload, None and Special. reload/restart requires a corresponding service target specified in the reload/restart field. Other values require no further configuration",
                                  "type": "string",
                                  "enum": [
                                    "Reboot",
                                    "Drain",
                                    "Reload",
                                    "Restart",
                                    "DaemonReload",
                                    "None",
                                    "Special"
                                  ]
                                }
                              },
                              "x-kubernetes-validations": [
                                {
                                  "message": "reload is required when type is Reload, and forbidden otherwise",
                                  "rule": "has(self.type) && self.type == 'Reload' ? has(self.reload) : !has(self.reload)"
                                },
                                {
                                  "message": "restart is required when type is Restart, and forbidden otherwise",
                                  "rule": "has(self.type) && self.type == 'Restart' ? has(self.restart) : !has(self.restart)"
                                }
                              ],
                              "additionalProperties": false
                            },
                            "x-kubernetes-list-type": "atomic",
                            "x-kubernetes-validations": [
                              {
                                "message": "Reboot action can only be specified standalone, as it will override any other actions",
                                "rule": "self.exists(x, x.type=='Reboot') ? size(self) == 1 : true"
                              },
                              {
                                "message": "None action can only be specified standalone, as it will override any other actions",
                                "rule": "self.exists(x, x.type=='None') ? size(self) == 1 : true"
                              }
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "units": {
                        "description": "units is a list MachineConfig unit definitions and actions to take on changes to those services",
                        "type": [
                          "array",
                          "null"
                        ],
                        "maxItems": 100,
                        "items": {
                          "description": "NodeDisruptionPolicyStatusUnit is a systemd unit name and corresponding actions to take and is used in the NodeDisruptionPolicyClusterStatus object",
                          "type": [
                            "object",
                            "null"
                          ],
                          "required": [
                            "actions",
                            "name"
                          ],
                          "properties": {
                            "actions": {
                              "description": "actions represents the series of commands to be executed on changes to the file at the corresponding file path. Actions will be applied in the order that they are set in this list. If there are other incoming changes to other MachineConfig entries in the same update that require a reboot, the reboot will supercede these actions. Valid actions are Reboot, Drain, Reload, DaemonReload and None. The Reboot action and the None action cannot be used in conjunction with any of the other actions. This list supports a maximum of 10 entries.",
                              "type": "array",
                              "maxItems": 10,
                              "items": {
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "reload": {
                                    "description": "reload specifies the service to reload, only valid if type is reload",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "required": [
                                      "serviceName"
                                    ],
                                    "properties": {
                                      "serviceName": {
                                        "description": "serviceName is the full name (e.g. crio.service) of the service to be reloaded Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                        "type": "string",
                                        "maxLength": 255,
                                        "x-kubernetes-validations": [
                                          {
                                            "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                            "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                          },
                                          {
                                            "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                            "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "restart": {
                                    "description": "restart specifies the service to restart, only valid if type is restart",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "required": [
                                      "serviceName"
                                    ],
                                    "properties": {
                                      "serviceName": {
                                        "description": "serviceName is the full name (e.g. crio.service) of the service to be restarted Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                                        "type": "string",
                                        "maxLength": 255,
                                        "x-kubernetes-validations": [
                                          {
                                            "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                            "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                          },
                                          {
                                            "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                            "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                          }
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "type": {
                                    "description": "type represents the commands that will be carried out if this NodeDisruptionPolicyStatusActionType is executed Valid values are Reboot, Drain, Reload, Restart, DaemonReload, None and Special. reload/restart requires a corresponding service target specified in the reload/restart field. Other values require no further configuration",
                                    "type": "string",
                                    "enum": [
                                      "Reboot",
                                      "Drain",
                                      "Reload",
                                      "Restart",
                                      "DaemonReload",
                                      "None",
                                      "Special"
                                    ]
                                  }
                                },
                                "x-kubernetes-validations": [
                                  {
                                    "message": "reload is required when type is Reload, and forbidden otherwise",
                                    "rule": "has(self.type) && self.type == 'Reload' ? has(self.reload) : !has(self.reload)"
                                  },
                                  {
                                    "message": "restart is required when type is Restart, and forbidden otherwise",
                                    "rule": "has(self.type) && self.type == 'Restart' ? has(self.restart) : !has(self.restart)"
                                  }
                                ],
                                "additionalProperties": false
                              },
                              "x-kubernetes-list-type": "atomic",
                              "x-kubernetes-validations": [
                                {
                                  "message": "Reboot action can only be specified standalone, as it will override any other actions",
                                  "rule": "self.exists(x, x.type=='Reboot') ? size(self) == 1 : true"
                                },
                                {
                                  "message": "None action can only be specified standalone, as it will override any other actions",
                                  "rule": "self.exists(x, x.type=='None') ? size(self) == 1 : true"
                                }
                              ]
                            },
                            "name": {
                              "description": "name represents the service name of a systemd service managed through a MachineConfig Actions specified will be applied for changes to the named service. Service names should be of the format ${NAME}${SERVICETYPE} and can up to 255 characters long. ${NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\". ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\", \".snapshot\", \".slice\" or \".scope\".",
                              "type": "string",
                              "maxLength": 255,
                              "x-kubernetes-validations": [
                                {
                                  "message": "Invalid ${SERVICETYPE} in service name. Expected format is ${NAME}${SERVICETYPE}, where ${SERVICETYPE} must be one of \".service\", \".socket\", \".device\", \".mount\", \".automount\", \".swap\", \".target\", \".path\", \".timer\",\".snapshot\", \".slice\" or \".scope\".",
                                  "rule": "self.matches('\\\\.(service|socket|device|mount|automount|swap|target|path|timer|snapshot|slice|scope)$')"
                                },
                                {
                                  "message": "Invalid ${NAME} in service name. Expected format is ${NAME}${SERVICETYPE}, where {NAME} must be atleast 1 character long and can only consist of alphabets, digits, \":\", \"-\", \"_\", \".\", and \"\\\"",
                                  "rule": "self.matches('^[a-zA-Z0-9:._\\\\\\\\-]+\\\\..')"
                                }
                              ]
                            }
                          },
                          "additionalProperties": false
                        },
                        "x-kubernetes-list-map-keys": [
                          "name"
                        ],
                        "x-kubernetes-list-type": "map"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "observedGeneration": {
                "description": "observedGeneration is the last generation change you've dealt with",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64"
              }
            },
            "additionalProperties": false
          }
        },
        "x-kubernetes-group-version-kind": [
          {
            "group": "operator.openshift.io",
            "kind": "MachineConfiguration",
            "version": "v1"
          }
        ],
        "additionalProperties": false
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "MachineConfigurationList"
      ]
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": [
            "string",
            "null"
          ]
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": [
            "string",
            "null"
          ]
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "operator.openshift.io",
      "kind": "MachineConfigurationList",
      "version": "v1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}
