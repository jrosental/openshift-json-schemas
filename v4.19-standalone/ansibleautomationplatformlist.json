{
  "description": "AnsibleAutomationPlatformList is a list of AnsibleAutomationPlatform",
  "type": "object",
  "required": [
    "items"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "items": {
      "description": "List of ansibleautomationplatforms. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
      "type": "array",
      "items": {
        "description": "AnsibleAutomationPlatform is the Schema for the ansibleautomationplatforms API",
        "type": "object",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "type": "object",
            "properties": {
              "annotations": {
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "creationTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "deletionTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-kubernetes-list-type": "set",
                "x-kubernetes-patch-strategy": "merge"
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type": "string"
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "labels": {
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "managedFields": {
                "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "type": "array",
                "items": {
                  "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type": "string"
                    },
                    "fieldsType": {
                      "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type": "string"
                    },
                    "fieldsV1": {
                      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                      "type": "object"
                    },
                    "manager": {
                      "description": "Manager is an identifier of the workflow managing these fields.",
                      "type": "string"
                    },
                    "operation": {
                      "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type": "string"
                    },
                    "subresource": {
                      "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                      "type": "string"
                    },
                    "time": {
                      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
                "type": "string"
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "type": "array",
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "type": "object",
                  "required": [
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": "boolean"
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": "boolean"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                },
                "x-kubernetes-list-map-keys": [
                  "uid"
                ],
                "x-kubernetes-list-type": "map",
                "x-kubernetes-patch-merge-key": "uid",
                "x-kubernetes-patch-strategy": "merge"
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": "string"
              },
              "selfLink": {
                "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                "type": "string"
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                "type": "string"
              }
            }
          },
          "spec": {
            "description": "Spec defines the desired state of AnsibleAutomationPlatform",
            "type": "object",
            "properties": {
              "admin_password_secret": {
                "description": "Secret where the admin password can be found",
                "type": "string",
                "maxLength": 255,
                "pattern": "^[a-zA-Z0-9][-a-zA-Z0-9]{0,253}[a-zA-Z0-9]$"
              },
              "api": {
                "description": "The gateway api deployment.",
                "type": "object",
                "properties": {
                  "log_level": {
                    "description": "The log level for the deployment.",
                    "type": "string",
                    "enum": [
                      "DEBUG",
                      "INFO",
                      "WARNING",
                      "ERROR",
                      "CRITICAL"
                    ]
                  },
                  "node_selector": {
                    "description": "NodeSelector for the gateway pods.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "replicas": {
                    "description": "The number of replicas for the deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "resource_requirements": {
                    "description": "Resource requirements for the galaxy api container",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      },
                      "requests": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "security_context": {
                    "description": "Settings to apply to the securityContext field of the api container.",
                    "x-kubernetes-preserve-unknown-fields": true
                  },
                  "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "type": "object",
                    "properties": {
                      "rollingUpdate": {
                        "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.",
                        "type": "object",
                        "properties": {
                          "maxSurge": {
                            "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          },
                          "maxUnavailable": {
                            "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "type": {
                        "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                        "type": "string"
                      }
                    }
                  },
                  "tolerations": {
                    "description": "Node tolerations for the gateway pods.",
                    "type": "array",
                    "items": {
                      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                          "type": "string"
                        },
                        "key": {
                          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                          "type": "string"
                        },
                        "tolerationSeconds": {
                          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "value": {
                          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                          "type": "string"
                        }
                      }
                    }
                  },
                  "topology_spread_constraints": {
                    "description": "Topology rule(s) for the pods.",
                    "type": "array",
                    "items": {
                      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
                      "type": "object",
                      "required": [
                        "maxSkew",
                        "topologyKey",
                        "whenUnsatisfiable"
                      ],
                      "properties": {
                        "labelSelector": {
                          "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.",
                          "type": "object",
                          "properties": {
                            "matchExpressions": {
                              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                              "type": "array",
                              "items": {
                                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                "type": "object",
                                "required": [
                                  "key",
                                  "operator"
                                ],
                                "properties": {
                                  "key": {
                                    "description": "key is the label key that the selector applies to.",
                                    "type": "string"
                                  },
                                  "operator": {
                                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                    "type": "string"
                                  },
                                  "values": {
                                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "matchLabels": {
                              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "x-kubernetes-map-type": "atomic"
                        },
                        "matchLabelKeys": {
                          "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "x-kubernetes-list-type": "atomic"
                        },
                        "maxSkew": {
                          "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. Its a required field. Default value is 1 and 0 is not allowed.",
                          "type": "integer",
                          "format": "int32"
                        },
                        "minDomains": {
                          "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. \n For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. \n This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).",
                          "type": "integer",
                          "format": "int32"
                        },
                        "nodeAffinityPolicy": {
                          "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations. \n If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                          "type": "string"
                        },
                        "nodeTaintsPolicy": {
                          "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included. \n If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
                          "type": "string"
                        },
                        "topologyKey": {
                          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
                          "type": "string"
                        },
                        "whenUnsatisfiable": {
                          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "bundle_cacert_secret": {
                "description": "Secret where the trusted Certificate Authority Bundle is stored",
                "type": "string"
              },
              "controller": {
                "description": "Controller defines the desired state of AutomationController",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "database": {
                "description": "The Gateway PostgreSQL database StatefulSet",
                "type": "object",
                "properties": {
                  "database_secret": {
                    "description": "Secret where the database configuration can be found. Set this to use your own external PostgreSQL database. If not specified, this secret will be generated and Gateway will create a managed postgres pod.",
                    "type": "string"
                  },
                  "idle_disabled": {
                    "description": "When true, prevents the database from being idled",
                    "type": "boolean"
                  },
                  "node_selector": {
                    "description": "NodeSelector for the database pod.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "postgres_data_volume_init": {
                    "description": "Sets permissions on the /var/lib/pgdata/data for postgres container using an init container (not Openshift)",
                    "type": "boolean"
                  },
                  "postgres_extra_args": {
                    "description": "Arguments to pass to postgres process",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "postgres_init_container_commands": {
                    "description": "Customize the postgres init container commands (Non Openshift)",
                    "type": "string"
                  },
                  "postgres_keep_pvc_after_upgrade": {
                    "description": "Specify whether or not to keep the old PVC after PostgreSQL upgrades",
                    "type": "boolean"
                  },
                  "postgres_ssl_mode": {
                    "description": "Configure PostgreSQL connection sslmode option. Default: \"prefer\"",
                    "type": "string"
                  },
                  "postgres_storage_class": {
                    "description": "Storage class to use for the PostgreSQL PVC",
                    "type": "string"
                  },
                  "priority_class": {
                    "description": "Assign a pre-existing priority class to the postgres pod",
                    "type": "string"
                  },
                  "resource_requirements": {
                    "description": "Resource requirements for the database container.",
                    "type": "object",
                    "properties": {
                      "claims": {
                        "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                        "type": "array",
                        "items": {
                          "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-list-map-keys": [
                          "name"
                        ],
                        "x-kubernetes-list-type": "map"
                      },
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "x-kubernetes-int-or-string": true
                        }
                      }
                    }
                  },
                  "storage_requirements": {
                    "description": "Storage requirements for the PostgreSQL container",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "type": "object",
                        "properties": {
                          "storage": {
                            "type": "string"
                          }
                        }
                      },
                      "requests": {
                        "type": "object",
                        "properties": {
                          "storage": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "tolerations": {
                    "description": "Node tolerations for the database pod.",
                    "type": "array",
                    "items": {
                      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                          "type": "string"
                        },
                        "key": {
                          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                          "type": "string"
                        },
                        "tolerationSeconds": {
                          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "value": {
                          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "db_fields_encryption_secret": {
                "description": "Secret where the DB fields encryption key can be found. If not specified, one will be generated.",
                "type": "string"
              },
              "eda": {
                "description": "EDA defines the desired state of EDA",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "extra_settings": {
                "description": "Environment variables to configure the application-level settings",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "setting": {
                      "type": "string"
                    },
                    "value": {
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  }
                }
              },
              "feature_flags": {
                "description": "Platform Feature Flags Dictionary",
                "type": "object",
                "additionalProperties": {
                  "type": "boolean"
                },
                "x-kubernetes-validations": [
                  {
                    "message": "All feature flag keys must start with 'FEATURE_'.",
                    "rule": "self.exists(k, k.startsWith('FEATURE_'))"
                  }
                ]
              },
              "hostname": {
                "description": "Override default hostname of the Ansible Automation Platform",
                "type": "string"
              },
              "hub": {
                "description": "Hub defines the desired state of AutomationHub",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "idle_aap": {
                "description": "Scale down replicas to put AAP into an idle mode",
                "type": "boolean"
              },
              "image": {
                "description": "AAP Gateway container image",
                "type": "string"
              },
              "image_proxy": {
                "description": "AAP Gateway Proxy container image",
                "type": "string"
              },
              "image_proxy_version": {
                "description": "AAP Gateway Proxy container image version (tag)",
                "type": "string"
              },
              "image_pull_policy": {
                "description": "The image pull policy",
                "type": "string",
                "enum": [
                  "Always",
                  "always",
                  "Never",
                  "never",
                  "IfNotPresent",
                  "ifnotpresent"
                ]
              },
              "image_pull_secrets": {
                "description": "Image pull secrets for app and database containers",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "image_version": {
                "description": "AAP Gateway container image version (tag)",
                "type": "string"
              },
              "ingress_annotations": {
                "description": "Annotations to add to the Ingress Controller",
                "type": "string"
              },
              "ingress_api_version": {
                "description": "The Ingress API version to use",
                "type": "string"
              },
              "ingress_class_name": {
                "description": "The name of ingress class to use instead of the cluster default.",
                "type": "string"
              },
              "ingress_path": {
                "description": "The ingress path used to reach the deployed service",
                "type": "string"
              },
              "ingress_path_type": {
                "description": "The ingress path type for the deployed service",
                "type": "string"
              },
              "ingress_tls_secret": {
                "description": "Secret where the Ingress TLS secret can be found",
                "type": "string"
              },
              "ingress_type": {
                "description": "The ingress type to use to reach the deployed instance",
                "type": "string",
                "enum": [
                  "none",
                  "Ingress",
                  "ingress",
                  "Route",
                  "route"
                ]
              },
              "lightspeed": {
                "description": "Lightspeed defines the desired state of AnsibleLightspeed",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "loadbalancer_port": {
                "description": "Port to use for the loadbalancer",
                "type": "integer"
              },
              "loadbalancer_protocol": {
                "description": "Protocol to use for the loadbalancer",
                "type": "string",
                "enum": [
                  "http",
                  "https"
                ]
              },
              "no_log": {
                "description": "Configure no_log for no_log tasks",
                "type": "boolean"
              },
              "postgres_image": {
                "description": "Registry path to the PostgreSQL container to use",
                "type": "string"
              },
              "postgres_image_version": {
                "description": "PostgreSQL container image version to use",
                "type": "string"
              },
              "public_base_url": {
                "description": "Public base URL for AAP",
                "type": "string"
              },
              "redhat_registry": {
                "description": "Default Redhat Container Image Registry",
                "type": "string"
              },
              "redhat_registry_ns": {
                "description": "Default Redhat Container Image Registry Namespace",
                "type": "string"
              },
              "redis": {
                "description": "Defines desired state of cache resources",
                "type": "object",
                "properties": {
                  "eda_redis_secret": {
                    "description": "Secret where the EDA redis configuration can be found. Set this to use your own external redis instance for EDA.",
                    "type": "string"
                  },
                  "node_selector": {
                    "description": "NodeSelector for the Redis pods.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "redis_secret": {
                    "description": "Secret where the redis configuration can be found. Set this to use your own external redis instance.",
                    "type": "string"
                  },
                  "replicas": {
                    "description": "Defines Redis Deployment replicas",
                    "type": "integer",
                    "format": "int32"
                  },
                  "resource_requirements": {
                    "description": "Resource requirements for the Redis container",
                    "type": "object",
                    "properties": {
                      "claims": {
                        "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable.",
                        "type": "array",
                        "items": {
                          "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                          "type": "object",
                          "required": [
                            "name"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                              "type": "string"
                            }
                          }
                        },
                        "x-kubernetes-list-map-keys": [
                          "name"
                        ],
                        "x-kubernetes-list-type": "map"
                      },
                      "limits": {
                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "x-kubernetes-int-or-string": true
                        }
                      },
                      "requests": {
                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                        "type": "object",
                        "additionalProperties": {
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "x-kubernetes-int-or-string": true
                        }
                      }
                    }
                  },
                  "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "type": "object",
                    "properties": {
                      "rollingUpdate": {
                        "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.",
                        "type": "object",
                        "properties": {
                          "maxSurge": {
                            "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          },
                          "maxUnavailable": {
                            "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "type": {
                        "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                        "type": "string"
                      }
                    }
                  },
                  "tolerations": {
                    "description": "Node tolerations for the Redis pods.",
                    "type": "array",
                    "items": {
                      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                          "type": "string"
                        },
                        "key": {
                          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                          "type": "string"
                        },
                        "operator": {
                          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                          "type": "string"
                        },
                        "tolerationSeconds": {
                          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                          "type": "integer",
                          "format": "int64"
                        },
                        "value": {
                          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "redis_image": {
                "description": "Registry path to the redis container to use",
                "type": "string"
              },
              "redis_image_version": {
                "description": "Redis container image version to use",
                "type": "string"
              },
              "redis_mode": {
                "description": "Redis Mode",
                "type": "string",
                "enum": [
                  "cluster",
                  "standalone"
                ]
              },
              "route_annotations": {
                "description": "Annotations to add to the route",
                "type": "string"
              },
              "route_api_version": {
                "description": "The route API version to use",
                "type": "string"
              },
              "route_host": {
                "description": "The DNS to use to points to the instance",
                "type": "string"
              },
              "route_tls_secret": {
                "description": "Secret where the TLS related credentials are stored",
                "type": "string"
              },
              "route_tls_termination_mechanism": {
                "description": "The secure TLS termination mechanism to use",
                "type": "string",
                "enum": [
                  "Edge",
                  "edge",
                  "Passthrough",
                  "passthrough"
                ]
              },
              "service_account_annotations": {
                "description": "ServiceAccount annotations",
                "type": "string"
              },
              "service_annotations": {
                "description": "Annotations to add to the load balancer service",
                "type": "string"
              },
              "service_type": {
                "description": "The service type to be used on the deployed instance",
                "type": "string",
                "enum": [
                  "LoadBalancer",
                  "loadbalancer",
                  "ClusterIP",
                  "clusterip",
                  "NodePort",
                  "nodeport"
                ]
              }
            }
          },
          "status": {
            "description": "Status defines the observed state of AnsibleAutomationPlatform",
            "x-kubernetes-preserve-unknown-fields": true
          }
        },
        "x-kubernetes-group-version-kind": [
          {
            "group": "aap.ansible.com",
            "kind": "AnsibleAutomationPlatform",
            "version": "v1alpha1"
          }
        ],
        "x-kubernetes-selectable-fields": []
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": "object",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "aap.ansible.com",
      "kind": "AnsibleAutomationPlatformList",
      "version": "v1alpha1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}