{
  "description": "AutomationHubList is a list of AutomationHub",
  "type": "object",
  "required": [
    "items"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "items": {
      "description": "List of automationhubs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
      "type": "array",
      "items": {
        "description": "Schema validation for the Galaxy CRD",
        "type": "object",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "type": "object",
            "properties": {
              "annotations": {
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "creationTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "deletionTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-kubernetes-list-type": "set",
                "x-kubernetes-patch-strategy": "merge"
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type": "string"
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "labels": {
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "managedFields": {
                "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "type": "array",
                "items": {
                  "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type": "string"
                    },
                    "fieldsType": {
                      "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type": "string"
                    },
                    "fieldsV1": {
                      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                      "type": "object"
                    },
                    "manager": {
                      "description": "Manager is an identifier of the workflow managing these fields.",
                      "type": "string"
                    },
                    "operation": {
                      "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type": "string"
                    },
                    "subresource": {
                      "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                      "type": "string"
                    },
                    "time": {
                      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
                "type": "string"
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "type": "array",
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "type": "object",
                  "required": [
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": "boolean"
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": "boolean"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                },
                "x-kubernetes-list-map-keys": [
                  "uid"
                ],
                "x-kubernetes-list-type": "map",
                "x-kubernetes-patch-merge-key": "uid",
                "x-kubernetes-patch-strategy": "merge"
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": "string"
              },
              "selfLink": {
                "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                "type": "string"
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                "type": "string"
              }
            }
          },
          "spec": {
            "type": "object",
            "properties": {
              "admin_password_secret": {
                "description": "Secret where the administrator password can be found",
                "type": "string"
              },
              "affinity": {
                "description": "Defines various deployment affinities",
                "type": "object",
                "properties": {
                  "node_affinity": {
                    "description": "Defines the node affinity for the deployment",
                    "x-kubernetes-preserve-unknown-fields": true
                  }
                }
              },
              "api": {
                "description": "The galaxy api deployment.",
                "type": "object",
                "properties": {
                  "log_level": {
                    "description": "The log level for the deployment.",
                    "type": "string",
                    "enum": [
                      "DEBUG",
                      "INFO",
                      "WARNING",
                      "ERROR",
                      "CRITICAL"
                    ]
                  },
                  "replicas": {
                    "description": "The number of replicas for the deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "resource_requirements": {
                    "description": "Resource requirements for the galaxy api container",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      },
                      "requests": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "type": "object",
                    "properties": {
                      "rollingUpdate": {
                        "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.",
                        "type": "object",
                        "properties": {
                          "maxSurge": {
                            "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          },
                          "maxUnavailable": {
                            "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "type": {
                        "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "bundle_cacert_secret": {
                "description": "Secret where the trusted Certificate Authority Bundle is stored",
                "type": "string"
              },
              "container_token_secret": {
                "description": "Secret where the container token certificates are stored",
                "type": "string"
              },
              "content": {
                "description": "The galaxy content deployment.",
                "type": "object",
                "properties": {
                  "log_level": {
                    "description": "The log level for the deployment.",
                    "type": "string",
                    "enum": [
                      "DEBUG",
                      "INFO",
                      "WARNING",
                      "ERROR",
                      "CRITICAL"
                    ]
                  },
                  "replicas": {
                    "description": "The number of replicas for the deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "resource_requirements": {
                    "description": "Resource requirements for the galaxy content container",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      },
                      "requests": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "type": "object",
                    "properties": {
                      "rollingUpdate": {
                        "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.",
                        "type": "object",
                        "properties": {
                          "maxSurge": {
                            "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          },
                          "maxUnavailable": {
                            "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "type": {
                        "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "db_fields_encryption_secret": {
                "description": "Secret where the Fernet symmetric encryption key is stored",
                "type": "string"
              },
              "deployment_type": {
                "description": "Name of the deployment type",
                "type": "string"
              },
              "file_storage_access_mode": {
                "description": "The file storage access mode.",
                "type": "string",
                "enum": [
                  "ReadWriteMany",
                  "ReadWriteOnce"
                ]
              },
              "file_storage_size": {
                "description": "The size of the file storage; for example 100Gi.",
                "type": "string"
              },
              "file_storage_storage_class": {
                "description": "Storage class to use for the file persistentVolumeClaim",
                "type": "string"
              },
              "force_drop_db": {
                "description": "(Deprecated) Force drop the database of the new Galaxy before restoring. USE WITH CAUTION!",
                "type": "boolean"
              },
              "gunicorn_api_workers": {
                "description": "The number of gunicorn workers to use for the api.",
                "type": "integer"
              },
              "gunicorn_content_workers": {
                "description": "The number of gunicorn workers to use for the content.",
                "type": "integer"
              },
              "gunicorn_timeout": {
                "description": "The timeout for the gunicorn process.",
                "type": "integer"
              },
              "haproxy_timeout": {
                "description": "HAProxy timeout",
                "type": "string"
              },
              "hostname": {
                "description": "The hostname of the instance",
                "type": "string"
              },
              "idle_deployment": {
                "description": "Scale down deployments to put Galaxy into an idle state",
                "type": "boolean"
              },
              "image": {
                "description": "The image name (repo name) for the galaxy image.",
                "type": "string"
              },
              "image_pull_policy": {
                "description": "Image pull policy for container image",
                "type": "string",
                "enum": [
                  "IfNotPresent",
                  "Always",
                  "Never"
                ]
              },
              "image_pull_secret": {
                "description": "The image pull secret (deprecated. Use image_pull_secrets instead)",
                "type": "string"
              },
              "image_pull_secrets": {
                "description": "The image pull secrets",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "image_version": {
                "description": "The image version for the galaxy image.",
                "type": "string"
              },
              "image_web": {
                "description": "The image name (repo name) for the galaxy-ui webserver image.",
                "type": "string"
              },
              "image_web_version": {
                "description": "The image version for the galaxy-ui webserver image.",
                "type": "string"
              },
              "ingress_annotations": {
                "description": "Annotations to add to the ingress",
                "type": "string"
              },
              "ingress_class_name": {
                "description": "The name of ingress class to use instead of the cluster default.",
                "type": "string"
              },
              "ingress_tls_secret": {
                "description": "Secret where the ingress TLS secret can be found",
                "type": "string"
              },
              "ingress_type": {
                "description": "The ingress type to use to reach the deployed instance",
                "type": "string",
                "enum": [
                  "none",
                  "Ingress",
                  "ingress",
                  "Route",
                  "route",
                  "LoadBalancer",
                  "loadbalancer",
                  "NodePort",
                  "nodeport"
                ]
              },
              "loadbalancer_port": {
                "description": "Port to use for the loadbalancer",
                "type": "integer"
              },
              "loadbalancer_protocol": {
                "description": "Protocol to use for the loadbalancer",
                "type": "string",
                "enum": [
                  "http",
                  "https"
                ]
              },
              "nginx_client_max_body_size": {
                "description": "NGINX client max body size",
                "type": "string"
              },
              "nginx_proxy_connect_timeout": {
                "description": "NGINX proxy connect timeout",
                "type": "string"
              },
              "nginx_proxy_read_timeout": {
                "description": "NGINX proxy read timeout",
                "type": "string"
              },
              "nginx_proxy_send_timeout": {
                "description": "NGINX proxy send timeout",
                "type": "string"
              },
              "no_log": {
                "description": "Configure no_log for no_log tasks",
                "type": "boolean"
              },
              "node_selector": {
                "description": "nodeSelector for the Galaxy pods",
                "type": "string"
              },
              "nodeport_port": {
                "description": "Provide requested port value",
                "type": "string"
              },
              "object_storage_azure_secret": {
                "description": "The secret for Azure blob storage configuration.",
                "type": "string"
              },
              "object_storage_s3_secret": {
                "description": "The secret for S3 compliant object storage configuration.",
                "type": "string"
              },
              "postgres_configuration_secret": {
                "description": "Secret where the database configuration can be found",
                "type": "string"
              },
              "postgres_data_volume_init": {
                "description": "Sets permissions on the /var/lib/pgdata/data for postgres container using an init container (not Openshift)",
                "type": "boolean"
              },
              "postgres_extra_args": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "postgres_host_auth_method": {
                "description": "The method to be used for database host authentication",
                "type": "string"
              },
              "postgres_image": {
                "description": "Registry path to the PostgreSQL container to use",
                "type": "string"
              },
              "postgres_init_container_commands": {
                "description": "Customize the postgres init container commands (Non Openshift)",
                "type": "string"
              },
              "postgres_initdb_args": {
                "description": "The arguments to be passed to initialize the database",
                "type": "string"
              },
              "postgres_keep_pvc_after_upgrade": {
                "description": "Specify whether or not to keep the old PVC after PostgreSQL upgrades",
                "type": "boolean"
              },
              "postgres_label_selector": {
                "description": "Label selector used to identify postgres pod for executing migration",
                "type": "string"
              },
              "postgres_migrant_configuration_secret": {
                "description": "Secret where the old database configuration can be found for data migration",
                "type": "string"
              },
              "postgres_resource_requirements": {
                "description": "Resource requirements for the PostgreSQL container",
                "type": "object",
                "properties": {
                  "limits": {
                    "type": "object",
                    "properties": {
                      "cpu": {
                        "type": "string"
                      },
                      "memory": {
                        "type": "string"
                      }
                    }
                  },
                  "requests": {
                    "type": "object",
                    "properties": {
                      "cpu": {
                        "type": "string"
                      },
                      "memory": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "postgres_selector": {
                "description": "nodeSelector for the Postgres pods",
                "type": "string"
              },
              "postgres_storage_class": {
                "description": "Storage class to use for the PostgreSQL PVC",
                "type": "string"
              },
              "postgres_storage_requirements": {
                "description": "Storage requirements for the PostgreSQL container",
                "type": "object",
                "properties": {
                  "limits": {
                    "type": "object",
                    "properties": {
                      "storage": {
                        "type": "string"
                      }
                    }
                  },
                  "requests": {
                    "type": "object",
                    "properties": {
                      "storage": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "postgres_tolerations": {
                "description": "node tolerations for the Postgres pods",
                "type": "string"
              },
              "public_base_url": {
                "description": "Public base URL",
                "type": "string"
              },
              "pulp_settings": {
                "description": "The pulp settings.",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "redis": {
                "description": "The galaxy redis deployment.",
                "type": "object",
                "properties": {
                  "log_level": {
                    "description": "The log level for the deployment.",
                    "type": "string",
                    "enum": [
                      "DEBUG",
                      "INFO",
                      "WARNING",
                      "ERROR",
                      "CRITICAL"
                    ]
                  },
                  "replicas": {
                    "description": "(Deprecated) The number of replicas for redis is 1",
                    "type": "integer",
                    "format": "int32",
                    "maximum": 1
                  },
                  "resource_requirements": {
                    "description": "Resource requirements for the galaxy redis container",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      },
                      "requests": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "type": "object",
                    "properties": {
                      "rollingUpdate": {
                        "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.",
                        "type": "object",
                        "properties": {
                          "maxSurge": {
                            "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          },
                          "maxUnavailable": {
                            "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "type": {
                        "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "redis_data_persistence": {
                "description": "Specify whether or not to have a redis pvc",
                "type": "boolean"
              },
              "redis_image": {
                "description": "The image name for the redis image.",
                "type": "string"
              },
              "redis_resource_requirements": {
                "description": "(Deprecated, use redis.resource_requirements instead) Resource requirements for the Redis container",
                "type": "object",
                "properties": {
                  "limits": {
                    "type": "object",
                    "properties": {
                      "cpu": {
                        "type": "string"
                      },
                      "memory": {
                        "type": "string"
                      },
                      "storage": {
                        "type": "string"
                      }
                    }
                  },
                  "requests": {
                    "type": "object",
                    "properties": {
                      "cpu": {
                        "type": "string"
                      },
                      "memory": {
                        "type": "string"
                      },
                      "storage": {
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "redis_storage_class": {
                "description": "Storage class to use for the Redis PVC",
                "type": "string"
              },
              "redis_storage_size": {
                "description": "Storage size to use for the Redis PVC",
                "type": "string"
              },
              "resource_manager": {
                "description": "The galaxy resource manager deployment.",
                "type": "object",
                "properties": {
                  "replicas": {
                    "description": "The number of replicas for the deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "resource_requirements": {
                    "description": "Resource requirements for the galaxy resource manager container",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      },
                      "requests": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "type": "object",
                    "properties": {
                      "rollingUpdate": {
                        "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.",
                        "type": "object",
                        "properties": {
                          "maxSurge": {
                            "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          },
                          "maxUnavailable": {
                            "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "type": {
                        "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "route_host": {
                "description": "The DNS to use to points to the instance",
                "type": "string"
              },
              "route_tls_secret": {
                "description": "Secret where the TLS related credentials are stored",
                "type": "string"
              },
              "route_tls_termination_mechanism": {
                "description": "The secure TLS termination mechanism to use",
                "type": "string",
                "enum": [
                  "Edge",
                  "edge",
                  "Passthrough",
                  "passthrough"
                ]
              },
              "service_annotations": {
                "description": "Annotations to add to the service",
                "type": "string"
              },
              "signing_scripts_configmap": {
                "description": "ConfigMap where the signing scripts are stored",
                "type": "string"
              },
              "signing_secret": {
                "description": "Secret where the signing certificates are stored",
                "type": "string"
              },
              "sso_secret": {
                "description": "Secret where Single Sign-on configuration can be found",
                "type": "string"
              },
              "storage_type": {
                "description": "Configuration for the storage type to be utilized",
                "type": "string",
                "enum": [
                  "file",
                  "File",
                  "s3",
                  "S3",
                  "azure",
                  "Azure"
                ]
              },
              "tolerations": {
                "description": "node tolerations for the Galaxy pods",
                "type": "string"
              },
              "topology_spread_constraints": {
                "description": "topology rule(s) for the pods",
                "type": "string"
              },
              "web": {
                "description": "The galaxy web deployment.",
                "type": "object",
                "properties": {
                  "replicas": {
                    "description": "The number of replicas for the deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "resource_requirements": {
                    "description": "Resource requirements for the galaxy web container",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      },
                      "requests": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "type": "object",
                    "properties": {
                      "rollingUpdate": {
                        "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.",
                        "type": "object",
                        "properties": {
                          "maxSurge": {
                            "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          },
                          "maxUnavailable": {
                            "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "type": {
                        "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "worker": {
                "description": "The galaxy worker deployment.",
                "type": "object",
                "properties": {
                  "replicas": {
                    "description": "The number of replicas for the deployment.",
                    "type": "integer",
                    "format": "int32"
                  },
                  "resource_requirements": {
                    "description": "Resource requirements for the galaxy worker container",
                    "type": "object",
                    "properties": {
                      "limits": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      },
                      "requests": {
                        "type": "object",
                        "properties": {
                          "cpu": {
                            "type": "string"
                          },
                          "memory": {
                            "type": "string"
                          },
                          "storage": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  },
                  "strategy": {
                    "description": "The deployment strategy to use to replace existing pods with new ones.",
                    "type": "object",
                    "properties": {
                      "rollingUpdate": {
                        "description": "Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate. --- TODO: Update this to follow our convention for oneOf, whatever we decide it to be.",
                        "type": "object",
                        "properties": {
                          "maxSurge": {
                            "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          },
                          "maxUnavailable": {
                            "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
                            "x-kubernetes-int-or-string": true
                          }
                        }
                      },
                      "type": {
                        "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "status": {
            "type": "object",
            "properties": {
              "adminPasswordSecret": {
                "description": "Admin password of the deployed instance",
                "type": "string"
              },
              "conditions": {
                "description": "The resulting conditions when a Service Telemetry is instantiated",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "lastTransitionTime": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "reason": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              },
              "containerTokenSecret": {
                "description": "The name of the secret used for container token authentication",
                "type": "string"
              },
              "databaseConfigurationSecret": {
                "description": "Database configuration secret used by the deployed instance",
                "type": "string"
              },
              "dbFieldsEncryptionSecret": {
                "description": "The name of the secret used for encrypting DB fields",
                "type": "string"
              },
              "deployedImage": {
                "description": "URL of the image used for the deployed instance",
                "type": "string"
              },
              "deployedVersion": {
                "description": "Version of the deployed instance",
                "type": "string"
              },
              "migrantDatabaseConfigurationSecret": {
                "description": "The configuration secret used for migrating an old deployment",
                "type": "string"
              },
              "signingSecret": {
                "description": "Secret where the signing certificates are stored",
                "type": "string"
              },
              "storagePersistentVolumeClaim": {
                "description": "The name of the persistent volume claim used for storage",
                "type": "string"
              },
              "storageSecret": {
                "description": "The name of the secret used for object storage",
                "type": "string"
              },
              "storageType": {
                "description": "The type of storage being used by the deployed instance",
                "type": "string"
              },
              "upgradedFrom": {
                "description": "Last gated version",
                "type": "string"
              },
              "upgradedPostgresVersion": {
                "description": "Status to indicate that the database has been upgraded to the version in the status",
                "type": "string"
              },
              "webURL": {
                "description": "URL to access the deployed instance",
                "type": "string"
              }
            }
          }
        },
        "x-kubernetes-group-version-kind": [
          {
            "group": "automationhub.ansible.com",
            "kind": "AutomationHub",
            "version": "v1beta1"
          }
        ],
        "x-kubernetes-selectable-fields": []
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": "object",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "automationhub.ansible.com",
      "kind": "AutomationHubList",
      "version": "v1beta1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}