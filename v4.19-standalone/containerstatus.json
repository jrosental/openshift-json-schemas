{
  "description": "ContainerStatus contains details for the current status of this container.",
  "type": "object",
  "required": [
    "name",
    "ready",
    "restartCount",
    "image",
    "imageID"
  ],
  "properties": {
    "allocatedResources": {
      "description": "AllocatedResources represents the compute resources allocated for this container by the node. Kubelet sets this value to Container.Resources.Requests upon successful pod admission and after successfully admitting desired pod resize.",
      "type": "object",
      "additionalProperties": {
        "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n``` <quantity>        ::= <signedNumber><suffix>\n\n\t(Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n\t(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n\n\t(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber> ```\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
        "type": "string"
      }
    },
    "allocatedResourcesStatus": {
      "description": "AllocatedResourcesStatus represents the status of various resources allocated for this Pod.",
      "type": "array",
      "items": {
        "description": "ResourceStatus represents the status of a single resource allocated to a Pod.",
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "Name of the resource. Must be unique within the pod and in case of non-DRA resource, match one of the resources from the pod spec. For DRA resources, the value must be \"claim:<claim_name>/<request>\". When this status is reported about a container, the \"claim_name\" and \"request\" must match one of the claims of this container.",
            "type": "string"
          },
          "resources": {
            "description": "List of unique resources health. Each element in the list contains an unique resource ID and its health. At a minimum, for the lifetime of a Pod, resource ID must uniquely identify the resource allocated to the Pod on the Node. If other Pod on the same Node reports the status with the same resource ID, it must be the same resource they share. See ResourceID type definition for a specific format it has in various use cases.",
            "type": "array",
            "items": {
              "description": "ResourceHealth represents the health of a resource. It has the latest device health information. This is a part of KEP https://kep.k8s.io/4680.",
              "type": "object",
              "required": [
                "resourceID"
              ],
              "properties": {
                "health": {
                  "description": "Health of the resource. can be one of:\n - Healthy: operates as normal\n - Unhealthy: reported unhealthy. We consider this a temporary health issue\n              since we do not have a mechanism today to distinguish\n              temporary and permanent issues.\n - Unknown: The status cannot be determined.\n            For example, Device Plugin got unregistered and hasn't been re-registered since.\n\nIn future we may want to introduce the PermanentlyUnhealthy Status.",
                  "type": "string"
                },
                "resourceID": {
                  "description": "ResourceID is the unique identifier of the resource. See the ResourceID type for more information.",
                  "type": "string"
                }
              }
            },
            "x-kubernetes-list-map-keys": [
              "resourceID"
            ],
            "x-kubernetes-list-type": "map"
          }
        }
      },
      "x-kubernetes-list-map-keys": [
        "name"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "name",
      "x-kubernetes-patch-strategy": "merge"
    },
    "containerID": {
      "description": "ContainerID is the ID of the container in the format '<type>://<container_id>'. Where type is a container runtime identifier, returned from Version call of CRI API (for example \"containerd\").",
      "type": "string"
    },
    "image": {
      "description": "Image is the name of container image that the container is running. The container image may not match the image used in the PodSpec, as it may have been resolved by the runtime. More info: https://kubernetes.io/docs/concepts/containers/images.",
      "type": "string"
    },
    "imageID": {
      "description": "ImageID is the image ID of the container's image. The image ID may not match the image ID of the image used in the PodSpec, as it may have been resolved by the runtime.",
      "type": "string"
    },
    "lastState": {
      "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
      "type": "object",
      "properties": {
        "running": {
          "description": "ContainerStateRunning is a running state of a container.",
          "type": "object",
          "properties": {
            "startedAt": {
              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "terminated": {
          "description": "ContainerStateTerminated is a terminated state of a container.",
          "type": "object",
          "required": [
            "exitCode"
          ],
          "properties": {
            "containerID": {
              "description": "Container's ID in the format '<type>://<container_id>'",
              "type": "string"
            },
            "exitCode": {
              "description": "Exit status from the last termination of the container",
              "type": "integer",
              "format": "int32"
            },
            "finishedAt": {
              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
              "type": "string",
              "format": "date-time"
            },
            "message": {
              "description": "Message regarding the last termination of the container",
              "type": "string"
            },
            "reason": {
              "description": "(brief) reason from the last termination of the container",
              "type": "string"
            },
            "signal": {
              "description": "Signal from the last termination of the container",
              "type": "integer",
              "format": "int32"
            },
            "startedAt": {
              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "waiting": {
          "description": "ContainerStateWaiting is a waiting state of a container.",
          "type": "object",
          "properties": {
            "message": {
              "description": "Message regarding why the container is not yet running.",
              "type": "string"
            },
            "reason": {
              "description": "(brief) reason the container is not yet running.",
              "type": "string"
            }
          }
        }
      }
    },
    "name": {
      "description": "Name is a DNS_LABEL representing the unique name of the container. Each container in a pod must have a unique name across all container types. Cannot be updated.",
      "type": "string"
    },
    "ready": {
      "description": "Ready specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see Started field).\n\nThe value is typically used to determine whether a container is ready to accept traffic.",
      "type": "boolean"
    },
    "resources": {
      "description": "ResourceRequirements describes the compute resource requirements.",
      "type": "object",
      "properties": {
        "claims": {
          "description": "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
          "type": "array",
          "items": {
            "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "description": "Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.",
                "type": "string"
              },
              "request": {
                "description": "Request is the name chosen for a request in the referenced claim. If empty, everything from the claim is made available, otherwise only the result of this request.",
                "type": "string"
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "limits": {
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object",
          "additionalProperties": {
            "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n``` <quantity>        ::= <signedNumber><suffix>\n\n\t(Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n\t(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n\n\t(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber> ```\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
            "type": "string"
          }
        },
        "requests": {
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object",
          "additionalProperties": {
            "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.\n\nThe serialization format is:\n\n``` <quantity>        ::= <signedNumber><suffix>\n\n\t(Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n\n\t(International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n\n<decimalSI>       ::= m | \"\" | k | M | G | T | P | E\n\n\t(Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber> ```\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
            "type": "string"
          }
        }
      }
    },
    "restartCount": {
      "description": "RestartCount holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.",
      "type": "integer",
      "format": "int32"
    },
    "started": {
      "description": "Started indicates whether the container has finished its postStart lifecycle hook and passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no startupProbe is defined and container is running and has passed the postStart lifecycle hook. The null value must be treated the same as false.",
      "type": "boolean"
    },
    "state": {
      "description": "ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.",
      "type": "object",
      "properties": {
        "running": {
          "description": "ContainerStateRunning is a running state of a container.",
          "type": "object",
          "properties": {
            "startedAt": {
              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "terminated": {
          "description": "ContainerStateTerminated is a terminated state of a container.",
          "type": "object",
          "required": [
            "exitCode"
          ],
          "properties": {
            "containerID": {
              "description": "Container's ID in the format '<type>://<container_id>'",
              "type": "string"
            },
            "exitCode": {
              "description": "Exit status from the last termination of the container",
              "type": "integer",
              "format": "int32"
            },
            "finishedAt": {
              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
              "type": "string",
              "format": "date-time"
            },
            "message": {
              "description": "Message regarding the last termination of the container",
              "type": "string"
            },
            "reason": {
              "description": "(brief) reason from the last termination of the container",
              "type": "string"
            },
            "signal": {
              "description": "Signal from the last termination of the container",
              "type": "integer",
              "format": "int32"
            },
            "startedAt": {
              "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "waiting": {
          "description": "ContainerStateWaiting is a waiting state of a container.",
          "type": "object",
          "properties": {
            "message": {
              "description": "Message regarding why the container is not yet running.",
              "type": "string"
            },
            "reason": {
              "description": "(brief) reason the container is not yet running.",
              "type": "string"
            }
          }
        }
      }
    },
    "user": {
      "description": "ContainerUser represents user identity information",
      "type": "object",
      "properties": {
        "linux": {
          "description": "LinuxContainerUser represents user identity information in Linux containers",
          "type": "object",
          "required": [
            "uid",
            "gid"
          ],
          "properties": {
            "gid": {
              "description": "GID is the primary gid initially attached to the first process in the container",
              "type": "integer",
              "format": "int64"
            },
            "supplementalGroups": {
              "description": "SupplementalGroups are the supplemental groups initially attached to the first process in the container",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              },
              "x-kubernetes-list-type": "atomic"
            },
            "uid": {
              "description": "UID is the primary uid initially attached to the first process in the container",
              "type": "integer",
              "format": "int64"
            }
          }
        }
      }
    },
    "volumeMounts": {
      "description": "Status of volume mounts.",
      "type": "array",
      "items": {
        "description": "VolumeMountStatus shows status of volume mounts.",
        "type": "object",
        "required": [
          "name",
          "mountPath"
        ],
        "properties": {
          "mountPath": {
            "description": "MountPath corresponds to the original VolumeMount.",
            "type": "string"
          },
          "name": {
            "description": "Name corresponds to the name of the original VolumeMount.",
            "type": "string"
          },
          "readOnly": {
            "description": "ReadOnly corresponds to the original VolumeMount.",
            "type": "boolean"
          },
          "recursiveReadOnly": {
            "description": "RecursiveReadOnly must be set to Disabled, Enabled, or unspecified (for non-readonly mounts). An IfPossible value in the original VolumeMount must be translated to Disabled or Enabled, depending on the mount result.",
            "type": "string"
          }
        }
      },
      "x-kubernetes-list-map-keys": [
        "mountPath"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "mountPath",
      "x-kubernetes-patch-strategy": "merge"
    }
  },
  "$schema": "http://json-schema.org/schema#"
}