{
  "description": "DevWorkspaceOperatorConfig is the Schema for the devworkspaceoperatorconfigs API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "config": {
      "description": "OperatorConfiguration defines configuration options for the DevWorkspace\nOperator.",
      "type": "object",
      "properties": {
        "enableExperimentalFeatures": {
          "description": "EnableExperimentalFeatures turns on in-development features of the controller.\nThis option should generally not be enabled, as any capabilites are subject\nto removal without notice.",
          "type": "boolean"
        },
        "routing": {
          "description": "Routing defines configuration options related to DevWorkspace networking",
          "type": "object",
          "properties": {
            "clusterHostSuffix": {
              "description": "ClusterHostSuffix is the hostname suffix to be used for DevWorkspace endpoints.\nOn OpenShift, the DevWorkspace Operator will attempt to determine the appropriate\nvalue automatically. Must be specified on Kubernetes.",
              "type": "string"
            },
            "defaultRoutingClass": {
              "description": "DefaultRoutingClass specifies the routingClass to be used when a DevWorkspace\nspecifies an empty `.spec.routingClass`. Supported routingClasses can be defined\nin other controllers. If not specified, the default value of \"basic\" is used.",
              "type": "string"
            },
            "proxyConfig": {
              "description": "ProxyConfig defines the proxy settings that should be used for all DevWorkspaces.\nThese values are propagated to workspace containers as environment variables.\n\nOn OpenShift, the operator automatically reads values from the \"cluster\" proxies.config.openshift.io\nobject and this value only needs to be set to override those defaults. Values for httpProxy\nand httpsProxy override the cluster configuration directly. Entries for noProxy are merged\nwith the noProxy values in the cluster configuration. To ignore automatically read values from the cluster,\nset values in fields to the empty string (\"\")\n\nChanges to the proxy configuration are detected by the DevWorkspace Operator and propagated to\nDevWorkspaces. However, changing the proxy configuration for the DevWorkspace Operator itself\nrequires restarting the controller deployment.",
              "type": "object",
              "properties": {
                "httpProxy": {
                  "description": "HttpProxy is the URL of the proxy for HTTP requests, in the format http://USERNAME:PASSWORD@SERVER:PORT/. To ignore\nautomatically detected proxy settings for the cluster, set this field to an empty string (\"\")",
                  "type": "string"
                },
                "httpsProxy": {
                  "description": "HttpsProxy is the URL of the proxy for HTTPS requests, in the format http://USERNAME:PASSWORD@SERVER:PORT/. To ignore\nautomatically detected proxy settings for the cluster, set this field to an empty string (\"\")",
                  "type": "string"
                },
                "noProxy": {
                  "description": "NoProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Ignored\nwhen HttpProxy and HttpsProxy are unset. To ignore automatically detected proxy settings for the cluster, set this\nfield to an empty string (\"\")",
                  "type": "string"
                }
              }
            },
            "tlsCertificateConfigmapRef": {
              "description": "TLSCertificateConfigmapRef defines the name and namespace of the configmap with a certificate to inject into the\nHTTP client.",
              "type": "object",
              "required": [
                "name",
                "namespace"
              ],
              "properties": {
                "name": {
                  "description": "Name is the name of the configmap",
                  "type": "string"
                },
                "namespace": {
                  "description": "Namespace is the namespace of the configmap",
                  "type": "string"
                }
              }
            }
          }
        },
        "webhook": {
          "description": "Webhook defines configuration options for the DevWorkspace Webhook Server.\nNote: In order for changes made to the webhook configuration to take effect:\n\n- The changes must be made in the global DevWorkspaceOperatorConfig, which has the\n  name 'devworkspace-operator-config' and exists in the same namespace where the\n  DevWorkspaceOperator is deployed.\n\n- The devworkspace-controller-manager pod must be terminated and recreated for the\n  DevWorkspace Webhook Server deployment to be updated.",
          "type": "object",
          "properties": {
            "nodeSelector": {
              "description": "NodeSelector defines the map of Kubernetes nodeSelectors to apply to the DevWorkspace Webhook\nServer pod(s).\nNo NodeSelectors are added by default.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "replicas": {
              "description": "Replicas defines the number of desired DevWorkspace Webhook Server pods.\nDefaults to 2.",
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "tolerations": {
              "description": "Tolerations defines the array of Kubernetes pod tolerations to apply to the DevWorkspace Webhook\nServer pod(s).\nNo Tolerations are added by default.",
              "type": "array",
              "items": {
                "description": "The pod this Toleration is attached to tolerates any taint that matches\nthe triple <key,value,effect> using the matching operator <operator>.",
                "type": "object",
                "properties": {
                  "effect": {
                    "description": "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                    "type": "string"
                  },
                  "key": {
                    "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.",
                    "type": "string"
                  },
                  "tolerationSeconds": {
                    "description": "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.",
                    "type": "integer",
                    "format": "int64"
                  },
                  "value": {
                    "description": "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "workspace": {
          "description": "Workspace defines configuration options related to how DevWorkspaces are\nmanaged",
          "type": "object",
          "properties": {
            "cleanupCronJob": {
              "description": "CleanupCronJobConfig defines configuration options for a cron job that automatically cleans up stale DevWorkspaces.",
              "type": "object",
              "properties": {
                "dryRun": {
                  "description": "DryRun determines whether the cleanup cron job should be run in dry-run mode.\nIf set to true, the cron job will not delete any DevWorkspaces, but will log the DevWorkspaces that would have been deleted.\nDefaults to false if not specified.",
                  "type": "boolean"
                },
                "enable": {
                  "description": "Enable determines whether the cleanup cron job is enabled.\nDefaults to false if not specified.",
                  "type": "boolean"
                },
                "retainTime": {
                  "description": "RetainTime specifies the minimum time (in seconds) since a DevWorkspace was last started before it is considered stale and eligible for cleanup.\nFor example, a value of 2592000 (30 days) would mean that any DevWorkspace that has not been started in the last 30 days will be deleted.\nDefaults to 2592000 seconds (30 days) if not specified.",
                  "type": "integer",
                  "format": "int32",
                  "minimum": 0
                },
                "schedule": {
                  "description": "Schedule specifies the cron schedule for the cleanup cron job.",
                  "type": "string"
                }
              }
            },
            "cleanupOnStop": {
              "description": "CleanupOnStop governs how the Operator handles stopped DevWorkspaces. If set to\ntrue, additional resources associated with a DevWorkspace (e.g. services, deployments,\nconfigmaps, etc.) will be removed from the cluster when a DevWorkspace has\n.spec.started = false. If set to false, resources will be scaled down (e.g. deployments\nbut the objects will be left on the cluster). The default value is false.",
              "type": "boolean"
            },
            "containerSecurityContext": {
              "description": "ContainerSecurityContext overrides the default ContainerSecurityContext used for all\nworkspace-related containers created by the DevWorkspace Operator. If set, defined\nvalues are merged into the default configuration",
              "type": "object",
              "properties": {
                "allowPrivilegeEscalation": {
                  "description": "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "boolean"
                },
                "appArmorProfile": {
                  "description": "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "localhostProfile": {
                      "description": "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".",
                      "type": "string"
                    },
                    "type": {
                      "description": "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                      "type": "string"
                    }
                  }
                },
                "capabilities": {
                  "description": "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "object",
                  "properties": {
                    "add": {
                      "description": "Added capabilities",
                      "type": "array",
                      "items": {
                        "description": "Capability represent POSIX capabilities type",
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "atomic"
                    },
                    "drop": {
                      "description": "Removed capabilities",
                      "type": "array",
                      "items": {
                        "description": "Capability represent POSIX capabilities type",
                        "type": "string"
                      },
                      "x-kubernetes-list-type": "atomic"
                    }
                  }
                },
                "privileged": {
                  "description": "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "boolean"
                },
                "procMount": {
                  "description": "procMount denotes the type of proc mount to use for the containers.\nThe default value is Default which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "string"
                },
                "readOnlyRootFilesystem": {
                  "description": "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "boolean"
                },
                "runAsGroup": {
                  "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "integer",
                  "format": "int64"
                },
                "runAsNonRoot": {
                  "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.",
                  "type": "boolean"
                },
                "runAsUser": {
                  "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "integer",
                  "format": "int64"
                },
                "seLinuxOptions": {
                  "description": "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "object",
                  "properties": {
                    "level": {
                      "description": "Level is SELinux level label that applies to the container.",
                      "type": "string"
                    },
                    "role": {
                      "description": "Role is a SELinux role label that applies to the container.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type is a SELinux type label that applies to the container.",
                      "type": "string"
                    },
                    "user": {
                      "description": "User is a SELinux user label that applies to the container.",
                      "type": "string"
                    }
                  }
                },
                "seccompProfile": {
                  "description": "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "localhostProfile": {
                      "description": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.",
                      "type": "string"
                    },
                    "type": {
                      "description": "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.",
                      "type": "string"
                    }
                  }
                },
                "windowsOptions": {
                  "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.",
                  "type": "object",
                  "properties": {
                    "gmsaCredentialSpec": {
                      "description": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.",
                      "type": "string"
                    },
                    "gmsaCredentialSpecName": {
                      "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                      "type": "string"
                    },
                    "hostProcess": {
                      "description": "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.",
                      "type": "boolean"
                    },
                    "runAsUserName": {
                      "description": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "defaultContainerResources": {
              "description": "DefaultContainerResources defines the resource requirements (memory/cpu limit/request) used for\ncontainer components that do not define limits or requests. In order to not set a field by default,\nthe value \"0\" should be used. By default, the memory limit is 128Mi and the memory request is 64Mi.\nNo CPU limit or request is added by default.",
              "type": "object",
              "properties": {
                "claims": {
                  "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                  "type": "array",
                  "items": {
                    "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                        "type": "string"
                      },
                      "request": {
                        "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-map-keys": [
                    "name"
                  ],
                  "x-kubernetes-list-type": "map"
                },
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": "object",
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              }
            },
            "defaultStorageSize": {
              "description": "DefaultStorageSize defines an optional struct with fields to specify the sizes of Persistent Volume Claims for storage\nclasses used by DevWorkspaces.",
              "type": "object",
              "properties": {
                "common": {
                  "description": "The default Persistent Volume Claim size for the \"common\" storage class.\nNote that the \"async\" storage class also uses the PVC size set for the \"common\" storage class.\nIf not specified, the \"common\" and \"async\" Persistent Volume Claim sizes are set to 10Gi",
                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                  "x-kubernetes-int-or-string": true
                },
                "perWorkspace": {
                  "description": "The default Persistent Volume Claim size for the \"per-workspace\" storage class.\nIf not specified, the \"per-workspace\" Persistent Volume Claim size is set to 5Gi",
                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                  "x-kubernetes-int-or-string": true
                }
              }
            },
            "defaultTemplate": {
              "description": "DefaultTemplate defines an optional DevWorkspace Spec Template which gets applied to the workspace\nif the workspace's Template Spec Components are not defined. The DefaultTemplate will overwrite the existing\nTemplate Spec, with the exception of Projects (if any are defined).",
              "type": "object",
              "properties": {
                "attributes": {
                  "description": "Map of implementation-dependant free-form YAML attributes.",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "commands": {
                  "description": "Predefined, ready-to-use, devworkspace-related commands",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "apply": {
                        "description": "Command that consists in applying a given component definition,\ntypically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event,\nand references a `container` component, it will start the container as a\nK8S initContainer in the devworkspace POD, unless the component has its\n`dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component,\nit is assumed the component will be applied at devworkspace start\nby default, unless `deployByDefault` for that component is set to false.",
                        "type": "object",
                        "required": [
                          "component"
                        ],
                        "properties": {
                          "component": {
                            "description": "Describes component that will be applied",
                            "type": "string"
                          },
                          "group": {
                            "description": "Defines the group this command is part of",
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "properties": {
                              "isDefault": {
                                "description": "Identifies the default command for a given group kind",
                                "type": "boolean"
                              },
                              "kind": {
                                "description": "Kind of group the command is part of",
                                "type": "string",
                                "enum": [
                                  "build",
                                  "run",
                                  "test",
                                  "debug",
                                  "deploy"
                                ]
                              }
                            }
                          },
                          "label": {
                            "description": "Optional label that provides a label for this command\nto be used in Editor UI menus for example",
                            "type": "string"
                          }
                        }
                      },
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "commandType": {
                        "description": "Type of devworkspace command",
                        "type": "string",
                        "enum": [
                          "Exec",
                          "Apply",
                          "Composite",
                          "Custom"
                        ]
                      },
                      "composite": {
                        "description": "Composite command that allows executing several sub-commands\neither sequentially or concurrently",
                        "type": "object",
                        "properties": {
                          "commands": {
                            "description": "The commands that comprise this composite command",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "group": {
                            "description": "Defines the group this command is part of",
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "properties": {
                              "isDefault": {
                                "description": "Identifies the default command for a given group kind",
                                "type": "boolean"
                              },
                              "kind": {
                                "description": "Kind of group the command is part of",
                                "type": "string",
                                "enum": [
                                  "build",
                                  "run",
                                  "test",
                                  "debug",
                                  "deploy"
                                ]
                              }
                            }
                          },
                          "label": {
                            "description": "Optional label that provides a label for this command\nto be used in Editor UI menus for example",
                            "type": "string"
                          },
                          "parallel": {
                            "description": "Indicates if the sub-commands should be executed concurrently",
                            "type": "boolean"
                          }
                        }
                      },
                      "custom": {
                        "description": "Custom command whose logic is implementation-dependant\nand should be provided by the user\npossibly through some dedicated plugin",
                        "type": "object",
                        "required": [
                          "commandClass",
                          "embeddedResource"
                        ],
                        "properties": {
                          "commandClass": {
                            "description": "Class of command that the associated implementation component\nshould use to process this command with the appropriate logic",
                            "type": "string"
                          },
                          "embeddedResource": {
                            "description": "Additional free-form configuration for this custom command\nthat the implementation component will know how to use",
                            "x-kubernetes-embedded-resource": true,
                            "x-kubernetes-preserve-unknown-fields": true
                          },
                          "group": {
                            "description": "Defines the group this command is part of",
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "properties": {
                              "isDefault": {
                                "description": "Identifies the default command for a given group kind",
                                "type": "boolean"
                              },
                              "kind": {
                                "description": "Kind of group the command is part of",
                                "type": "string",
                                "enum": [
                                  "build",
                                  "run",
                                  "test",
                                  "debug",
                                  "deploy"
                                ]
                              }
                            }
                          },
                          "label": {
                            "description": "Optional label that provides a label for this command\nto be used in Editor UI menus for example",
                            "type": "string"
                          }
                        }
                      },
                      "exec": {
                        "description": "CLI Command executed in an existing component container",
                        "type": "object",
                        "required": [
                          "commandLine",
                          "component"
                        ],
                        "properties": {
                          "commandLine": {
                            "description": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
                            "type": "string"
                          },
                          "component": {
                            "description": "Describes component to which given action relates",
                            "type": "string"
                          },
                          "env": {
                            "description": "Optional list of environment variables that have to be set\nbefore running the command",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "group": {
                            "description": "Defines the group this command is part of",
                            "type": "object",
                            "required": [
                              "kind"
                            ],
                            "properties": {
                              "isDefault": {
                                "description": "Identifies the default command for a given group kind",
                                "type": "boolean"
                              },
                              "kind": {
                                "description": "Kind of group the command is part of",
                                "type": "string",
                                "enum": [
                                  "build",
                                  "run",
                                  "test",
                                  "debug",
                                  "deploy"
                                ]
                              }
                            }
                          },
                          "hotReloadCapable": {
                            "description": "Specify whether the command is restarted or not when the source code changes.\nIf set to `true` the command won't be restarted.\nA *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted.\nA *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again.\nThis field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\n\nDefault value is `false`",
                            "type": "boolean"
                          },
                          "label": {
                            "description": "Optional label that provides a label for this command\nto be used in Editor UI menus for example",
                            "type": "string"
                          },
                          "workingDir": {
                            "description": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
                            "type": "string"
                          }
                        }
                      },
                      "id": {
                        "description": "Mandatory identifier that allows referencing\nthis command in composite commands, from\na parent, or in events.",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      }
                    }
                  }
                },
                "components": {
                  "description": "List of the devworkspace components, such as editor and plugins,\nuser-provided containers, or other types of components",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "componentType": {
                        "description": "Type of component",
                        "type": "string",
                        "enum": [
                          "Container",
                          "Kubernetes",
                          "Openshift",
                          "Volume",
                          "Image",
                          "Plugin",
                          "Custom"
                        ]
                      },
                      "container": {
                        "description": "Allows adding and configuring devworkspace-related containers",
                        "type": "object",
                        "required": [
                          "image"
                        ],
                        "properties": {
                          "annotation": {
                            "description": "Annotations that should be added to specific resources for this container",
                            "type": "object",
                            "properties": {
                              "deployment": {
                                "description": "Annotations to be added to deployment",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "service": {
                                "description": "Annotations to be added to service",
                                "type": "object",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "args": {
                            "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "command": {
                            "description": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "cpuLimit": {
                            "type": "string"
                          },
                          "cpuRequest": {
                            "type": "string"
                          },
                          "dedicatedPod": {
                            "description": "Specify if a container should run in its own separated pod,\ninstead of running as part of the main development environment pod.\n\nDefault value is `false`",
                            "type": "boolean"
                          },
                          "endpoints": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "targetPort"
                              ],
                              "properties": {
                                "annotation": {
                                  "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n\n- cookiesAuthEnabled: \"true\" / \"false\",\n\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "exposure": {
                                  "description": "Describes how the endpoint should be exposed on the network.\n\n- `public` means that the endpoint will be exposed on the public network, typically through\na K8S ingress or an OpenShift route.\n\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD,\ntypically by K8S services, to be consumed by other elements running\non the same cloud internal network.\n\n- `none` means that the endpoint will not be exposed and will only be accessible\ninside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                  "type": "string",
                                  "enum": [
                                    "public",
                                    "internal",
                                    "none"
                                  ]
                                },
                                "name": {
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "path": {
                                  "description": "Path of the endpoint URL",
                                  "type": "string"
                                },
                                "protocol": {
                                  "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                  "type": "string",
                                  "enum": [
                                    "http",
                                    "https",
                                    "ws",
                                    "wss",
                                    "tcp",
                                    "udp"
                                  ]
                                },
                                "secure": {
                                  "description": "Describes whether the endpoint should be secured and protected by some\nauthentication process. This requires a protocol of `https` or `wss`.",
                                  "type": "boolean"
                                },
                                "targetPort": {
                                  "description": "Port number to be used within the container component. The same port cannot\nbe used by two different container components.",
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "env": {
                            "description": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "image": {
                            "type": "string"
                          },
                          "memoryLimit": {
                            "type": "string"
                          },
                          "memoryRequest": {
                            "type": "string"
                          },
                          "mountSources": {
                            "description": "Toggles whether or not the project source code should\nbe mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.",
                            "type": "boolean"
                          },
                          "sourceMapping": {
                            "description": "Optional specification of the path in the container where\nproject sources should be transferred/mounted when `mountSources` is `true`.\nWhen omitted, the default value of /projects is used.",
                            "type": "string"
                          },
                          "volumeMounts": {
                            "description": "List of volumes mounts that should be mounted is this container.",
                            "type": "array",
                            "items": {
                              "description": "Volume that should be mounted to a component container",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The volume mount name is the name of an existing `Volume` component.\nIf several containers mount the same volume name\nthen they will reuse the same volume and will be able to access to the same files.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "path": {
                                  "description": "The path in the component container where the volume should be mounted.\nIf not path is mentioned, default path is the is `/<name>`.",
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      },
                      "custom": {
                        "description": "Custom component whose logic is implementation-dependant\nand should be provided by the user\npossibly through some dedicated controller",
                        "type": "object",
                        "required": [
                          "componentClass",
                          "embeddedResource"
                        ],
                        "properties": {
                          "componentClass": {
                            "description": "Class of component that the associated implementation controller\nshould use to process this command with the appropriate logic",
                            "type": "string"
                          },
                          "embeddedResource": {
                            "description": "Additional free-form configuration for this custom component\nthat the implementation controller will know how to use",
                            "x-kubernetes-embedded-resource": true,
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        }
                      },
                      "image": {
                        "description": "Allows specifying the definition of an image for outer loop builds",
                        "type": "object",
                        "required": [
                          "imageName"
                        ],
                        "properties": {
                          "autoBuild": {
                            "description": "Defines if the image should be built during startup.\n\nDefault value is `false`",
                            "type": "boolean"
                          },
                          "dockerfile": {
                            "description": "Allows specifying dockerfile type build",
                            "type": "object",
                            "properties": {
                              "args": {
                                "description": "The arguments to supply to the dockerfile build.",
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "buildContext": {
                                "description": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container",
                                "type": "string"
                              },
                              "devfileRegistry": {
                                "description": "Dockerfile's Devfile Registry source",
                                "type": "object",
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry\nrequired for the Dockerfile build will be downloaded for building the image.",
                                    "type": "string"
                                  },
                                  "registryUrl": {
                                    "description": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src.\nTo ensure the Dockerfile gets resolved consistently in different environments,\nit is recommended to always specify the `devfileRegistryUrl` when `Id` is used.",
                                    "type": "string"
                                  }
                                }
                              },
                              "git": {
                                "description": "Dockerfile's Git source",
                                "type": "object",
                                "required": [
                                  "remotes"
                                ],
                                "properties": {
                                  "checkoutFrom": {
                                    "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                                    "type": "object",
                                    "properties": {
                                      "remote": {
                                        "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                        "type": "string"
                                      },
                                      "revision": {
                                        "description": "The revision to checkout from. Should be branch name, tag or commit id.\nDefault branch is used if missing or specified revision is not found.",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "fileLocation": {
                                    "description": "Location of the Dockerfile in the Git repository when using git as Dockerfile src.\nDefaults to Dockerfile.",
                                    "type": "string"
                                  },
                                  "remotes": {
                                    "description": "The remotes map which should be initialized in the git project.\nProjects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                }
                              },
                              "rootRequired": {
                                "description": "Specify if a privileged builder pod is required.\n\nDefault value is `false`",
                                "type": "boolean"
                              },
                              "srcType": {
                                "description": "Type of Dockerfile src",
                                "type": "string",
                                "enum": [
                                  "Uri",
                                  "DevfileRegistry",
                                  "Git"
                                ]
                              },
                              "uri": {
                                "description": "URI Reference of a Dockerfile.\nIt can be a full URL or a relative URI from the current devfile as the base URI.",
                                "type": "string"
                              }
                            }
                          },
                          "imageName": {
                            "description": "Name of the image for the resulting outerloop build",
                            "type": "string"
                          },
                          "imageType": {
                            "description": "Type of image",
                            "type": "string",
                            "enum": [
                              "Dockerfile"
                            ]
                          }
                        }
                      },
                      "kubernetes": {
                        "description": "Allows importing into the devworkspace the Kubernetes resources\ndefined in a given manifest. For example this allows reusing the Kubernetes\ndefinitions used to deploy some runtime components in production.",
                        "type": "object",
                        "properties": {
                          "deployByDefault": {
                            "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                            "type": "boolean"
                          },
                          "endpoints": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "targetPort"
                              ],
                              "properties": {
                                "annotation": {
                                  "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n\n- cookiesAuthEnabled: \"true\" / \"false\",\n\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "exposure": {
                                  "description": "Describes how the endpoint should be exposed on the network.\n\n- `public` means that the endpoint will be exposed on the public network, typically through\na K8S ingress or an OpenShift route.\n\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD,\ntypically by K8S services, to be consumed by other elements running\non the same cloud internal network.\n\n- `none` means that the endpoint will not be exposed and will only be accessible\ninside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                  "type": "string",
                                  "enum": [
                                    "public",
                                    "internal",
                                    "none"
                                  ]
                                },
                                "name": {
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "path": {
                                  "description": "Path of the endpoint URL",
                                  "type": "string"
                                },
                                "protocol": {
                                  "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                  "type": "string",
                                  "enum": [
                                    "http",
                                    "https",
                                    "ws",
                                    "wss",
                                    "tcp",
                                    "udp"
                                  ]
                                },
                                "secure": {
                                  "description": "Describes whether the endpoint should be secured and protected by some\nauthentication process. This requires a protocol of `https` or `wss`.",
                                  "type": "boolean"
                                },
                                "targetPort": {
                                  "description": "Port number to be used within the container component. The same port cannot\nbe used by two different container components.",
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "inlined": {
                            "description": "Inlined manifest",
                            "type": "string"
                          },
                          "locationType": {
                            "description": "Type of Kubernetes-like location",
                            "type": "string",
                            "enum": [
                              "Uri",
                              "Inlined"
                            ]
                          },
                          "uri": {
                            "description": "Location in a file fetched from a uri.",
                            "type": "string"
                          }
                        }
                      },
                      "name": {
                        "description": "Mandatory name that allows referencing the component\nfrom other elements (such as commands) or from an external\ndevfile that may reference this component through a parent or a plugin.",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "openshift": {
                        "description": "Allows importing into the devworkspace the OpenShift resources\ndefined in a given manifest. For example this allows reusing the OpenShift\ndefinitions used to deploy some runtime components in production.",
                        "type": "object",
                        "properties": {
                          "deployByDefault": {
                            "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                            "type": "boolean"
                          },
                          "endpoints": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name",
                                "targetPort"
                              ],
                              "properties": {
                                "annotation": {
                                  "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                  "type": "object",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n\n- cookiesAuthEnabled: \"true\" / \"false\",\n\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "exposure": {
                                  "description": "Describes how the endpoint should be exposed on the network.\n\n- `public` means that the endpoint will be exposed on the public network, typically through\na K8S ingress or an OpenShift route.\n\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD,\ntypically by K8S services, to be consumed by other elements running\non the same cloud internal network.\n\n- `none` means that the endpoint will not be exposed and will only be accessible\ninside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                  "type": "string",
                                  "enum": [
                                    "public",
                                    "internal",
                                    "none"
                                  ]
                                },
                                "name": {
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "path": {
                                  "description": "Path of the endpoint URL",
                                  "type": "string"
                                },
                                "protocol": {
                                  "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                  "type": "string",
                                  "enum": [
                                    "http",
                                    "https",
                                    "ws",
                                    "wss",
                                    "tcp",
                                    "udp"
                                  ]
                                },
                                "secure": {
                                  "description": "Describes whether the endpoint should be secured and protected by some\nauthentication process. This requires a protocol of `https` or `wss`.",
                                  "type": "boolean"
                                },
                                "targetPort": {
                                  "description": "Port number to be used within the container component. The same port cannot\nbe used by two different container components.",
                                  "type": "integer"
                                }
                              }
                            }
                          },
                          "inlined": {
                            "description": "Inlined manifest",
                            "type": "string"
                          },
                          "locationType": {
                            "description": "Type of Kubernetes-like location",
                            "type": "string",
                            "enum": [
                              "Uri",
                              "Inlined"
                            ]
                          },
                          "uri": {
                            "description": "Location in a file fetched from a uri.",
                            "type": "string"
                          }
                        }
                      },
                      "plugin": {
                        "description": "Allows importing a plugin.\n\nPlugins are mainly imported devfiles that contribute components, commands\nand events as a consistent single unit. They are defined in either YAML files\nfollowing the devfile syntax,\nor as `DevWorkspaceTemplate` Kubernetes Custom Resources",
                        "type": "object",
                        "properties": {
                          "commands": {
                            "description": "Overrides of commands encapsulated in a parent devfile or a plugin.\nOverriding is done according to K8S strategic merge patch standard rules.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "apply": {
                                  "description": "Command that consists in applying a given component definition,\ntypically bound to a devworkspace event.\n\nFor example, when an `apply` command is bound to a `preStart` event,\nand references a `container` component, it will start the container as a\nK8S initContainer in the devworkspace POD, unless the component has its\n`dedicatedPod` field set to `true`.\n\nWhen no `apply` command exist for a given component,\nit is assumed the component will be applied at devworkspace start\nby default, unless `deployByDefault` for that component is set to false.",
                                  "type": "object",
                                  "properties": {
                                    "component": {
                                      "description": "Describes component that will be applied",
                                      "type": "string"
                                    },
                                    "group": {
                                      "description": "Defines the group this command is part of",
                                      "type": "object",
                                      "properties": {
                                        "isDefault": {
                                          "description": "Identifies the default command for a given group kind",
                                          "type": "boolean"
                                        },
                                        "kind": {
                                          "description": "Kind of group the command is part of",
                                          "type": "string",
                                          "enum": [
                                            "build",
                                            "run",
                                            "test",
                                            "debug",
                                            "deploy"
                                          ]
                                        }
                                      }
                                    },
                                    "label": {
                                      "description": "Optional label that provides a label for this command\nto be used in Editor UI menus for example",
                                      "type": "string"
                                    }
                                  }
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant free-form YAML attributes.",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "commandType": {
                                  "description": "Type of devworkspace command",
                                  "type": "string",
                                  "enum": [
                                    "Exec",
                                    "Apply",
                                    "Composite"
                                  ]
                                },
                                "composite": {
                                  "description": "Composite command that allows executing several sub-commands\neither sequentially or concurrently",
                                  "type": "object",
                                  "properties": {
                                    "commands": {
                                      "description": "The commands that comprise this composite command",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "group": {
                                      "description": "Defines the group this command is part of",
                                      "type": "object",
                                      "properties": {
                                        "isDefault": {
                                          "description": "Identifies the default command for a given group kind",
                                          "type": "boolean"
                                        },
                                        "kind": {
                                          "description": "Kind of group the command is part of",
                                          "type": "string",
                                          "enum": [
                                            "build",
                                            "run",
                                            "test",
                                            "debug",
                                            "deploy"
                                          ]
                                        }
                                      }
                                    },
                                    "label": {
                                      "description": "Optional label that provides a label for this command\nto be used in Editor UI menus for example",
                                      "type": "string"
                                    },
                                    "parallel": {
                                      "description": "Indicates if the sub-commands should be executed concurrently",
                                      "type": "boolean"
                                    }
                                  }
                                },
                                "exec": {
                                  "description": "CLI Command executed in an existing component container",
                                  "type": "object",
                                  "properties": {
                                    "commandLine": {
                                      "description": "The actual command-line string\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
                                      "type": "string"
                                    },
                                    "component": {
                                      "description": "Describes component to which given action relates",
                                      "type": "string"
                                    },
                                    "env": {
                                      "description": "Optional list of environment variables that have to be set\nbefore running the command",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "group": {
                                      "description": "Defines the group this command is part of",
                                      "type": "object",
                                      "properties": {
                                        "isDefault": {
                                          "description": "Identifies the default command for a given group kind",
                                          "type": "boolean"
                                        },
                                        "kind": {
                                          "description": "Kind of group the command is part of",
                                          "type": "string",
                                          "enum": [
                                            "build",
                                            "run",
                                            "test",
                                            "debug",
                                            "deploy"
                                          ]
                                        }
                                      }
                                    },
                                    "hotReloadCapable": {
                                      "description": "Specify whether the command is restarted or not when the source code changes.\nIf set to `true` the command won't be restarted.\nA *hotReloadCapable* `run` or `debug` command is expected to handle file changes on its own and won't be restarted.\nA *hotReloadCapable* `build` command is expected to be executed only once and won't be executed again.\nThis field is taken into account only for commands `build`, `run` and `debug` with `isDefault` set to `true`.\n\nDefault value is `false`",
                                      "type": "boolean"
                                    },
                                    "label": {
                                      "description": "Optional label that provides a label for this command\nto be used in Editor UI menus for example",
                                      "type": "string"
                                    },
                                    "workingDir": {
                                      "description": "Working directory where the command should be executed\n\nSpecial variables that can be used:\n\n - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping.\n\n - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "id": {
                                  "description": "Mandatory identifier that allows referencing\nthis command in composite commands, from\na parent, or in events.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                }
                              }
                            }
                          },
                          "components": {
                            "description": "Overrides of components encapsulated in a parent devfile or a plugin.\nOverriding is done according to K8S strategic merge patch standard rules.",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "attributes": {
                                  "description": "Map of implementation-dependant free-form YAML attributes.",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "componentType": {
                                  "description": "Type of component",
                                  "type": "string",
                                  "enum": [
                                    "Container",
                                    "Kubernetes",
                                    "Openshift",
                                    "Volume",
                                    "Image"
                                  ]
                                },
                                "container": {
                                  "description": "Allows adding and configuring devworkspace-related containers",
                                  "type": "object",
                                  "properties": {
                                    "annotation": {
                                      "description": "Annotations that should be added to specific resources for this container",
                                      "type": "object",
                                      "properties": {
                                        "deployment": {
                                          "description": "Annotations to be added to deployment",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        },
                                        "service": {
                                          "description": "Annotations to be added to service",
                                          "type": "object",
                                          "additionalProperties": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "args": {
                                      "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "command": {
                                      "description": "The command to run in the dockerimage component instead of the default one provided in the image.\n\nDefaults to an empty array, meaning use whatever is defined in the image.",
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    },
                                    "cpuLimit": {
                                      "type": "string"
                                    },
                                    "cpuRequest": {
                                      "type": "string"
                                    },
                                    "dedicatedPod": {
                                      "description": "Specify if a container should run in its own separated pod,\ninstead of running as part of the main development environment pod.\n\nDefault value is `false`",
                                      "type": "boolean"
                                    },
                                    "endpoints": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "annotation": {
                                            "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          },
                                          "attributes": {
                                            "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n\n- cookiesAuthEnabled: \"true\" / \"false\",\n\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                            "x-kubernetes-preserve-unknown-fields": true
                                          },
                                          "exposure": {
                                            "description": "Describes how the endpoint should be exposed on the network.\n\n- `public` means that the endpoint will be exposed on the public network, typically through\na K8S ingress or an OpenShift route.\n\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD,\ntypically by K8S services, to be consumed by other elements running\non the same cloud internal network.\n\n- `none` means that the endpoint will not be exposed and will only be accessible\ninside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                            "type": "string",
                                            "enum": [
                                              "public",
                                              "internal",
                                              "none"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                          },
                                          "path": {
                                            "description": "Path of the endpoint URL",
                                            "type": "string"
                                          },
                                          "protocol": {
                                            "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                            "type": "string",
                                            "enum": [
                                              "http",
                                              "https",
                                              "ws",
                                              "wss",
                                              "tcp",
                                              "udp"
                                            ]
                                          },
                                          "secure": {
                                            "description": "Describes whether the endpoint should be secured and protected by some\nauthentication process. This requires a protocol of `https` or `wss`.",
                                            "type": "boolean"
                                          },
                                          "targetPort": {
                                            "description": "Port number to be used within the container component. The same port cannot\nbe used by two different container components.",
                                            "type": "integer"
                                          }
                                        }
                                      }
                                    },
                                    "env": {
                                      "description": "Environment variables used in this container.\n\nThe following variables are reserved and cannot be overridden via env:\n\n - `$PROJECTS_ROOT`\n\n - `$PROJECT_SOURCE`",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    },
                                    "image": {
                                      "type": "string"
                                    },
                                    "memoryLimit": {
                                      "type": "string"
                                    },
                                    "memoryRequest": {
                                      "type": "string"
                                    },
                                    "mountSources": {
                                      "description": "Toggles whether or not the project source code should\nbe mounted in the component.\n\nDefaults to true for all component types except plugins and components that set `dedicatedPod` to true.",
                                      "type": "boolean"
                                    },
                                    "sourceMapping": {
                                      "description": "Optional specification of the path in the container where\nproject sources should be transferred/mounted when `mountSources` is `true`.\nWhen omitted, the default value of /projects is used.",
                                      "type": "string"
                                    },
                                    "volumeMounts": {
                                      "description": "List of volumes mounts that should be mounted is this container.",
                                      "type": "array",
                                      "items": {
                                        "description": "Volume that should be mounted to a component container",
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "The volume mount name is the name of an existing `Volume` component.\nIf several containers mount the same volume name\nthen they will reuse the same volume and will be able to access to the same files.",
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                          },
                                          "path": {
                                            "description": "The path in the component container where the volume should be mounted.\nIf not path is mentioned, default path is the is `/<name>`.",
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                "image": {
                                  "description": "Allows specifying the definition of an image for outer loop builds",
                                  "type": "object",
                                  "properties": {
                                    "autoBuild": {
                                      "description": "Defines if the image should be built during startup.\n\nDefault value is `false`",
                                      "type": "boolean"
                                    },
                                    "dockerfile": {
                                      "description": "Allows specifying dockerfile type build",
                                      "type": "object",
                                      "properties": {
                                        "args": {
                                          "description": "The arguments to supply to the dockerfile build.",
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "buildContext": {
                                          "description": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container",
                                          "type": "string"
                                        },
                                        "devfileRegistry": {
                                          "description": "Dockerfile's Devfile Registry source",
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry\nrequired for the Dockerfile build will be downloaded for building the image.",
                                              "type": "string"
                                            },
                                            "registryUrl": {
                                              "description": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src.\nTo ensure the Dockerfile gets resolved consistently in different environments,\nit is recommended to always specify the `devfileRegistryUrl` when `Id` is used.",
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "git": {
                                          "description": "Dockerfile's Git source",
                                          "type": "object",
                                          "properties": {
                                            "checkoutFrom": {
                                              "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                                              "type": "object",
                                              "properties": {
                                                "remote": {
                                                  "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                                  "type": "string"
                                                },
                                                "revision": {
                                                  "description": "The revision to checkout from. Should be branch name, tag or commit id.\nDefault branch is used if missing or specified revision is not found.",
                                                  "type": "string"
                                                }
                                              }
                                            },
                                            "fileLocation": {
                                              "description": "Location of the Dockerfile in the Git repository when using git as Dockerfile src.\nDefaults to Dockerfile.",
                                              "type": "string"
                                            },
                                            "remotes": {
                                              "description": "The remotes map which should be initialized in the git project.\nProjects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.",
                                              "type": "object",
                                              "additionalProperties": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        },
                                        "rootRequired": {
                                          "description": "Specify if a privileged builder pod is required.\n\nDefault value is `false`",
                                          "type": "boolean"
                                        },
                                        "srcType": {
                                          "description": "Type of Dockerfile src",
                                          "type": "string",
                                          "enum": [
                                            "Uri",
                                            "DevfileRegistry",
                                            "Git"
                                          ]
                                        },
                                        "uri": {
                                          "description": "URI Reference of a Dockerfile.\nIt can be a full URL or a relative URI from the current devfile as the base URI.",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "imageName": {
                                      "description": "Name of the image for the resulting outerloop build",
                                      "type": "string"
                                    },
                                    "imageType": {
                                      "description": "Type of image",
                                      "type": "string",
                                      "enum": [
                                        "Dockerfile",
                                        "AutoBuild"
                                      ]
                                    }
                                  }
                                },
                                "kubernetes": {
                                  "description": "Allows importing into the devworkspace the Kubernetes resources\ndefined in a given manifest. For example this allows reusing the Kubernetes\ndefinitions used to deploy some runtime components in production.",
                                  "type": "object",
                                  "properties": {
                                    "deployByDefault": {
                                      "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                                      "type": "boolean"
                                    },
                                    "endpoints": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "annotation": {
                                            "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          },
                                          "attributes": {
                                            "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n\n- cookiesAuthEnabled: \"true\" / \"false\",\n\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                            "x-kubernetes-preserve-unknown-fields": true
                                          },
                                          "exposure": {
                                            "description": "Describes how the endpoint should be exposed on the network.\n\n- `public` means that the endpoint will be exposed on the public network, typically through\na K8S ingress or an OpenShift route.\n\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD,\ntypically by K8S services, to be consumed by other elements running\non the same cloud internal network.\n\n- `none` means that the endpoint will not be exposed and will only be accessible\ninside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                            "type": "string",
                                            "enum": [
                                              "public",
                                              "internal",
                                              "none"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                          },
                                          "path": {
                                            "description": "Path of the endpoint URL",
                                            "type": "string"
                                          },
                                          "protocol": {
                                            "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                            "type": "string",
                                            "enum": [
                                              "http",
                                              "https",
                                              "ws",
                                              "wss",
                                              "tcp",
                                              "udp"
                                            ]
                                          },
                                          "secure": {
                                            "description": "Describes whether the endpoint should be secured and protected by some\nauthentication process. This requires a protocol of `https` or `wss`.",
                                            "type": "boolean"
                                          },
                                          "targetPort": {
                                            "description": "Port number to be used within the container component. The same port cannot\nbe used by two different container components.",
                                            "type": "integer"
                                          }
                                        }
                                      }
                                    },
                                    "inlined": {
                                      "description": "Inlined manifest",
                                      "type": "string"
                                    },
                                    "locationType": {
                                      "description": "Type of Kubernetes-like location",
                                      "type": "string",
                                      "enum": [
                                        "Uri",
                                        "Inlined"
                                      ]
                                    },
                                    "uri": {
                                      "description": "Location in a file fetched from a uri.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "name": {
                                  "description": "Mandatory name that allows referencing the component\nfrom other elements (such as commands) or from an external\ndevfile that may reference this component through a parent or a plugin.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "openshift": {
                                  "description": "Allows importing into the devworkspace the OpenShift resources\ndefined in a given manifest. For example this allows reusing the OpenShift\ndefinitions used to deploy some runtime components in production.",
                                  "type": "object",
                                  "properties": {
                                    "deployByDefault": {
                                      "description": "Defines if the component should be deployed during startup.\n\nDefault value is `false`",
                                      "type": "boolean"
                                    },
                                    "endpoints": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "annotation": {
                                            "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          },
                                          "attributes": {
                                            "description": "Map of implementation-dependant string-based free-form attributes.\n\nExamples of Che-specific attributes:\n\n- cookiesAuthEnabled: \"true\" / \"false\",\n\n- type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                            "x-kubernetes-preserve-unknown-fields": true
                                          },
                                          "exposure": {
                                            "description": "Describes how the endpoint should be exposed on the network.\n\n- `public` means that the endpoint will be exposed on the public network, typically through\na K8S ingress or an OpenShift route.\n\n- `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD,\ntypically by K8S services, to be consumed by other elements running\non the same cloud internal network.\n\n- `none` means that the endpoint will not be exposed and will only be accessible\ninside the main devworkspace POD, on a local address.\n\nDefault value is `public`",
                                            "type": "string",
                                            "enum": [
                                              "public",
                                              "internal",
                                              "none"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                          },
                                          "path": {
                                            "description": "Path of the endpoint URL",
                                            "type": "string"
                                          },
                                          "protocol": {
                                            "description": "Describes the application and transport protocols of the traffic that will go through this endpoint.\n\n- `http`: Endpoint will have `http` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `https` when the `secure` field is set to `true`.\n\n- `https`: Endpoint will have `https` traffic, typically on a TCP connection.\n\n- `ws`: Endpoint will have `ws` traffic, typically on a TCP connection.\nIt will be automaticaly promoted to `wss` when the `secure` field is set to `true`.\n\n- `wss`: Endpoint will have `wss` traffic, typically on a TCP connection.\n\n- `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol.\n\n- `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol.\n\nDefault value is `http`",
                                            "type": "string",
                                            "enum": [
                                              "http",
                                              "https",
                                              "ws",
                                              "wss",
                                              "tcp",
                                              "udp"
                                            ]
                                          },
                                          "secure": {
                                            "description": "Describes whether the endpoint should be secured and protected by some\nauthentication process. This requires a protocol of `https` or `wss`.",
                                            "type": "boolean"
                                          },
                                          "targetPort": {
                                            "description": "Port number to be used within the container component. The same port cannot\nbe used by two different container components.",
                                            "type": "integer"
                                          }
                                        }
                                      }
                                    },
                                    "inlined": {
                                      "description": "Inlined manifest",
                                      "type": "string"
                                    },
                                    "locationType": {
                                      "description": "Type of Kubernetes-like location",
                                      "type": "string",
                                      "enum": [
                                        "Uri",
                                        "Inlined"
                                      ]
                                    },
                                    "uri": {
                                      "description": "Location in a file fetched from a uri.",
                                      "type": "string"
                                    }
                                  }
                                },
                                "volume": {
                                  "description": "Allows specifying the definition of a volume\nshared by several other components",
                                  "type": "object",
                                  "properties": {
                                    "ephemeral": {
                                      "description": "Ephemeral volumes are not stored persistently across restarts. Defaults\nto false",
                                      "type": "boolean"
                                    },
                                    "size": {
                                      "description": "Size of the volume",
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "id": {
                            "description": "Id in a registry that contains a Devfile yaml file",
                            "type": "string"
                          },
                          "importReferenceType": {
                            "description": "type of location from where the referenced template structure should be retrieved",
                            "type": "string",
                            "enum": [
                              "Uri",
                              "Id",
                              "Kubernetes"
                            ]
                          },
                          "kubernetes": {
                            "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
                            "type": "object",
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "namespace": {
                                "type": "string"
                              }
                            }
                          },
                          "registryUrl": {
                            "description": "Registry URL to pull the parent devfile from when using id in the parent reference.\nTo ensure the parent devfile gets resolved consistently in different environments,\nit is recommended to always specify the `registryUrl` when `id` is used.",
                            "type": "string"
                          },
                          "uri": {
                            "description": "URI Reference of a parent devfile YAML file.\nIt can be a full URL or a relative URI with the current devfile as the base URI.",
                            "type": "string"
                          },
                          "version": {
                            "description": "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference.\nTo specify `version`, `id` must be defined and used as the import reference source.\n`version` can be either a specific stack version, or `latest`.\nIf no `version` specified, default version will be used.",
                            "type": "string",
                            "pattern": "^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$"
                          }
                        }
                      },
                      "volume": {
                        "description": "Allows specifying the definition of a volume\nshared by several other components",
                        "type": "object",
                        "properties": {
                          "ephemeral": {
                            "description": "Ephemeral volumes are not stored persistently across restarts. Defaults\nto false",
                            "type": "boolean"
                          },
                          "size": {
                            "description": "Size of the volume",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "dependentProjects": {
                  "description": "Additional projects related to the main project in the devfile, contianing names and sources locations",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "clonePath": {
                        "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
                        "type": "string"
                      },
                      "custom": {
                        "description": "Project's Custom source",
                        "type": "object",
                        "required": [
                          "embeddedResource",
                          "projectSourceClass"
                        ],
                        "properties": {
                          "embeddedResource": {
                            "x-kubernetes-embedded-resource": true,
                            "x-kubernetes-preserve-unknown-fields": true
                          },
                          "projectSourceClass": {
                            "type": "string"
                          }
                        }
                      },
                      "git": {
                        "description": "Project's Git source",
                        "type": "object",
                        "required": [
                          "remotes"
                        ],
                        "properties": {
                          "checkoutFrom": {
                            "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                            "type": "object",
                            "properties": {
                              "remote": {
                                "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                "type": "string"
                              },
                              "revision": {
                                "description": "The revision to checkout from. Should be branch name, tag or commit id.\nDefault branch is used if missing or specified revision is not found.",
                                "type": "string"
                              }
                            }
                          },
                          "remotes": {
                            "description": "The remotes map which should be initialized in the git project.\nProjects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Project name",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "sourceType": {
                        "description": "Type of project source",
                        "type": "string",
                        "enum": [
                          "Git",
                          "Zip",
                          "Custom"
                        ]
                      },
                      "zip": {
                        "description": "Project's Zip source",
                        "type": "object",
                        "required": [
                          "location"
                        ],
                        "properties": {
                          "location": {
                            "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "events": {
                  "description": "Bindings of commands to events.\nEach command is referred-to by its name.",
                  "type": "object",
                  "properties": {
                    "postStart": {
                      "description": "IDs of commands that should be executed after the devworkspace is completely started.\nIn the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning.\nThis means that those commands are not triggered until the user opens the IDE in his browser.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "postStop": {
                      "description": "IDs of commands that should be executed after stopping the devworkspace.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "preStart": {
                      "description": "IDs of commands that should be executed before the devworkspace start.\nKubernetes-wise, these commands would typically be executed in init containers of the devworkspace POD.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "preStop": {
                      "description": "IDs of commands that should be executed before stopping the devworkspace.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "projects": {
                  "description": "Projects worked on in the devworkspace, containing names and sources locations",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "clonePath": {
                        "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
                        "type": "string"
                      },
                      "custom": {
                        "description": "Project's Custom source",
                        "type": "object",
                        "required": [
                          "embeddedResource",
                          "projectSourceClass"
                        ],
                        "properties": {
                          "embeddedResource": {
                            "x-kubernetes-embedded-resource": true,
                            "x-kubernetes-preserve-unknown-fields": true
                          },
                          "projectSourceClass": {
                            "type": "string"
                          }
                        }
                      },
                      "git": {
                        "description": "Project's Git source",
                        "type": "object",
                        "required": [
                          "remotes"
                        ],
                        "properties": {
                          "checkoutFrom": {
                            "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                            "type": "object",
                            "properties": {
                              "remote": {
                                "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                "type": "string"
                              },
                              "revision": {
                                "description": "The revision to checkout from. Should be branch name, tag or commit id.\nDefault branch is used if missing or specified revision is not found.",
                                "type": "string"
                              }
                            }
                          },
                          "remotes": {
                            "description": "The remotes map which should be initialized in the git project.\nProjects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Project name",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "sourceType": {
                        "description": "Type of project source",
                        "type": "string",
                        "enum": [
                          "Git",
                          "Zip",
                          "Custom"
                        ]
                      },
                      "zip": {
                        "description": "Project's Zip source",
                        "type": "object",
                        "required": [
                          "location"
                        ],
                        "properties": {
                          "location": {
                            "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "starterProjects": {
                  "description": "StarterProjects is a project that can be used as a starting point when bootstrapping new projects",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "custom": {
                        "description": "Project's Custom source",
                        "type": "object",
                        "required": [
                          "embeddedResource",
                          "projectSourceClass"
                        ],
                        "properties": {
                          "embeddedResource": {
                            "x-kubernetes-embedded-resource": true,
                            "x-kubernetes-preserve-unknown-fields": true
                          },
                          "projectSourceClass": {
                            "type": "string"
                          }
                        }
                      },
                      "description": {
                        "description": "Description of a starter project",
                        "type": "string"
                      },
                      "git": {
                        "description": "Project's Git source",
                        "type": "object",
                        "required": [
                          "remotes"
                        ],
                        "properties": {
                          "checkoutFrom": {
                            "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                            "type": "object",
                            "properties": {
                              "remote": {
                                "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                "type": "string"
                              },
                              "revision": {
                                "description": "The revision to checkout from. Should be branch name, tag or commit id.\nDefault branch is used if missing or specified revision is not found.",
                                "type": "string"
                              }
                            }
                          },
                          "remotes": {
                            "description": "The remotes map which should be initialized in the git project.\nProjects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.",
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "name": {
                        "description": "Project name",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "sourceType": {
                        "description": "Type of project source",
                        "type": "string",
                        "enum": [
                          "Git",
                          "Zip",
                          "Custom"
                        ]
                      },
                      "subDir": {
                        "description": "Sub-directory from a starter project to be used as root for starter project.",
                        "type": "string"
                      },
                      "zip": {
                        "description": "Project's Zip source",
                        "type": "object",
                        "required": [
                          "location"
                        ],
                        "properties": {
                          "location": {
                            "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "variables": {
                  "description": "Map of key-value variables used for string replacement in the devfile. Values can be referenced via {{variable-key}}\nto replace the corresponding value in string fields in the devfile. Replacement cannot be used for\n\n - schemaVersion, metadata, parent source\n\n - element identifiers, e.g. command id, component name, endpoint name, project name\n\n - references to identifiers, e.g. in events, a command's component, container's volume mount name\n\n - string enums, e.g. command group kind, endpoint exposure",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "deploymentStrategy": {
              "description": "DeploymentStrategy defines the deployment strategy to use to replace existing DevWorkspace pods\nwith new ones. The available deployment stragies are \"Recreate\" and \"RollingUpdate\".\nWith the \"Recreate\" deployment strategy, the existing workspace pod is killed before the new one is created.\nWith the \"RollingUpdate\" deployment strategy, a new workspace pod is created and the existing workspace pod is deleted\nonly when the new workspace pod is in a ready state.\nIf not specified, the default \"Recreate\" deployment strategy is used.",
              "type": "string",
              "enum": [
                "Recreate",
                "RollingUpdate"
              ]
            },
            "hostUsers": {
              "description": "Controls whether the Pod uses the host's user namespace.\nIf true (or omitted), the Pod runs in the host's user namespace.\nIf false, a new user namespace is created for the Pod.\nThis field is only used when the UserNamespacesSupport feature is enabled.\nIf the feature is disabled, setting this field may cause an endless workspace start loop.",
              "type": "boolean"
            },
            "idleTimeout": {
              "description": "IdleTimeout determines how long a workspace should sit idle before being\nautomatically scaled down. Proper functionality of this configuration property\nrequires support in the workspace being started. If not specified, the default\nvalue of \"15m\" is used.",
              "type": "string"
            },
            "ignoredUnrecoverableEvents": {
              "description": "IgnoredUnrecoverableEvents defines a list of Kubernetes event names that should\nbe ignored when deciding to fail a DevWorkspace startup. This option should be used\nif a transient cluster issue is triggering false-positives (for example, if\nthe cluster occasionally encounters FailedScheduling events). Events listed\nhere will not trigger DevWorkspace failures.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "imagePullPolicy": {
              "description": "ImagePullPolicy defines the imagePullPolicy used for containers in a DevWorkspace\nFor additional information, see Kubernetes documentation for imagePullPolicy. If\nnot specified, the default value of \"Always\" is used.",
              "type": "string",
              "enum": [
                "IfNotPresent",
                "Always",
                "Never"
              ]
            },
            "persistUserHome": {
              "description": "PersistUserHome defines configuration options for persisting the `/home/user/`\ndirectory in workspaces.",
              "type": "object",
              "properties": {
                "disableInitContainer": {
                  "description": "Determines whether the init container that initializes the persistent home directory should be disabled.\nWhen the `/home/user` directory is persisted, the init container is used to initialize the directory before\nthe workspace starts. If set to true, the init container will not be created.\nThis field is not used if the `workspace.persistUserHome.enabled` field is set to false.\nEnabled by default.",
                  "type": "boolean"
                },
                "enabled": {
                  "description": "Determines whether the `/home/user/` directory in workspaces should persist between\nworkspace shutdown and startup.\nMust be used with the 'per-user'/'common' or 'per-workspace' storage class in order to take effect.\nDisabled by default.",
                  "type": "boolean"
                }
              }
            },
            "podAnnotations": {
              "description": "PodAnnotations defines the metadata.annotations for DevWorkspace pods created by the DevWorkspace Operator.",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "podSecurityContext": {
              "description": "PodSecurityContext overrides the default PodSecurityContext used for all workspace-related\npods created by the DevWorkspace Operator. If set, defined values are merged into the default\nconfiguration",
              "type": "object",
              "properties": {
                "appArmorProfile": {
                  "description": "appArmorProfile is the AppArmor options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "localhostProfile": {
                      "description": "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".",
                      "type": "string"
                    },
                    "type": {
                      "description": "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.",
                      "type": "string"
                    }
                  }
                },
                "fsGroup": {
                  "description": "A special supplemental group that applies to all containers in a pod.\nSome volume types allow the Kubelet to change the ownership of that volume\nto be owned by the pod:\n\n1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "integer",
                  "format": "int64"
                },
                "fsGroupChangePolicy": {
                  "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume\nbefore being exposed inside Pod. This field will only apply to\nvolume types which support fsGroup based ownership(and permissions).\nIt will have no effect on ephemeral volume types such as: secret, configmaps\nand emptydir.\nValid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "string"
                },
                "runAsGroup": {
                  "description": "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "integer",
                  "format": "int64"
                },
                "runAsNonRoot": {
                  "description": "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.",
                  "type": "boolean"
                },
                "runAsUser": {
                  "description": "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "integer",
                  "format": "int64"
                },
                "seLinuxChangePolicy": {
                  "description": "seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.\nIt has no effect on nodes that do not support SELinux or to volumes does not support SELinux.\nValid values are \"MountOption\" and \"Recursive\".\n\n\"Recursive\" means relabeling of all files on all Pod volumes by the container runtime.\nThis may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.\n\n\"MountOption\" mounts all eligible Pod volumes with `-o context` mount option.\nThis requires all Pods that share the same volume to use the same SELinux label.\nIt is not possible to share the same volume among privileged and unprivileged Pods.\nEligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes\nwhose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their\nCSIDriver instance. Other volumes are always re-labelled recursively.\n\"MountOption\" value is allowed only when SELinuxMount feature gate is enabled.\n\nIf not specified and SELinuxMount feature gate is enabled, \"MountOption\" is used.\nIf not specified and SELinuxMount feature gate is disabled, \"MountOption\" is used for ReadWriteOncePod volumes\nand \"Recursive\" for all other volumes.\n\nThis field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.\n\nAll Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "string"
                },
                "seLinuxOptions": {
                  "description": "The SELinux context to be applied to all containers.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in SecurityContext.  If set in\nboth SecurityContext and PodSecurityContext, the value specified in SecurityContext\ntakes precedence for that container.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "object",
                  "properties": {
                    "level": {
                      "description": "Level is SELinux level label that applies to the container.",
                      "type": "string"
                    },
                    "role": {
                      "description": "Role is a SELinux role label that applies to the container.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type is a SELinux type label that applies to the container.",
                      "type": "string"
                    },
                    "user": {
                      "description": "User is a SELinux user label that applies to the container.",
                      "type": "string"
                    }
                  }
                },
                "seccompProfile": {
                  "description": "The seccomp options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "object",
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "localhostProfile": {
                      "description": "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.",
                      "type": "string"
                    },
                    "type": {
                      "description": "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.",
                      "type": "string"
                    }
                  }
                },
                "supplementalGroups": {
                  "description": "A list of groups applied to the first process run in each container, in\naddition to the container's primary GID and fsGroup (if specified).  If\nthe SupplementalGroupsPolicy feature is enabled, the\nsupplementalGroupsPolicy field determines whether these are in addition\nto or instead of any group memberships defined in the container image.\nIf unspecified, no additional groups are added, though group memberships\ndefined in the container image may still be used, depending on the\nsupplementalGroupsPolicy field.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "supplementalGroupsPolicy": {
                  "description": "Defines how supplemental groups of the first container processes are calculated.\nValid values are \"Merge\" and \"Strict\". If not specified, \"Merge\" is used.\n(Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled\nand the container runtime must implement support for this feature.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "string"
                },
                "sysctls": {
                  "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\nsysctls (by the container runtime) might fail to launch.\nNote that this field cannot be set when spec.os.name is windows.",
                  "type": "array",
                  "items": {
                    "description": "Sysctl defines a kernel parameter to be set",
                    "type": "object",
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of a property to set",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of a property to set",
                        "type": "string"
                      }
                    }
                  },
                  "x-kubernetes-list-type": "atomic"
                },
                "windowsOptions": {
                  "description": "The Windows specific settings applied to all containers.\nIf unspecified, the options within a container's SecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.",
                  "type": "object",
                  "properties": {
                    "gmsaCredentialSpec": {
                      "description": "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.",
                      "type": "string"
                    },
                    "gmsaCredentialSpecName": {
                      "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                      "type": "string"
                    },
                    "hostProcess": {
                      "description": "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.",
                      "type": "boolean"
                    },
                    "runAsUserName": {
                      "description": "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "postStartTimeout": {
              "description": "PostStartTimeout defines the maximum duration the PostStart hook can run\nbefore it is automatically failed. This timeout is used for the postStart lifecycle hook\nthat is used to run commands in the workspace container. The timeout is specified in seconds.\nDuration should be specified in a format parseable by Go's time package, e.g. \"20s\", \"2m\".\nIf not specified or \"0\", the timeout is disabled.",
              "type": "string"
            },
            "progressTimeout": {
              "description": "ProgressTimeout determines the maximum duration a DevWorkspace can be in\na \"Starting\" or \"Failing\" phase without progressing before it is automatically failed.\nDuration should be specified in a format parseable by Go's time package, e.g.\n\"15m\", \"20s\", \"1h30m\", etc. If not specified, the default value of \"5m\" is used.",
              "type": "string"
            },
            "projectClone": {
              "description": "ProjectCloneConfig defines configuration related to the project clone init container\nthat is used to clone git projects into the DevWorkspace.",
              "type": "object",
              "properties": {
                "env": {
                  "description": "Env allows defining additional environment variables for the project clone container.",
                  "type": "array",
                  "items": {
                    "description": "EnvVar represents an environment variable present in a Container.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the environment variable.\nMay consist of any printable ASCII characters except '='.",
                        "type": "string"
                      },
                      "value": {
                        "description": "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".",
                        "type": "string"
                      },
                      "valueFrom": {
                        "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                        "type": "object",
                        "properties": {
                          "configMapKeyRef": {
                            "description": "Selects a key of a ConfigMap.",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key to select.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the ConfigMap or its key must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "fieldRef": {
                            "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                            "type": "object",
                            "required": [
                              "fieldPath"
                            ],
                            "properties": {
                              "apiVersion": {
                                "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                "type": "string"
                              },
                              "fieldPath": {
                                "description": "Path of the field to select in the specified API version.",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "resourceFieldRef": {
                            "description": "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                            "type": "object",
                            "required": [
                              "resource"
                            ],
                            "properties": {
                              "containerName": {
                                "description": "Container name: required for volumes, optional for env vars",
                                "type": "string"
                              },
                              "divisor": {
                                "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                "x-kubernetes-int-or-string": true
                              },
                              "resource": {
                                "description": "Required: resource to select",
                                "type": "string"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          },
                          "secretKeyRef": {
                            "description": "Selects a key of a secret in the pod's namespace",
                            "type": "object",
                            "required": [
                              "key"
                            ],
                            "properties": {
                              "key": {
                                "description": "The key of the secret to select from.  Must be a valid secret key.",
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                                "type": "string"
                              },
                              "optional": {
                                "description": "Specify whether the Secret or its key must be defined",
                                "type": "boolean"
                              }
                            },
                            "x-kubernetes-map-type": "atomic"
                          }
                        }
                      }
                    }
                  }
                },
                "image": {
                  "description": "Image is the container image to use for cloning projects",
                  "type": "string"
                },
                "imagePullPolicy": {
                  "description": "ImagePullPolicy configures the imagePullPolicy for the project clone container.\nIf undefined, the general setting .config.workspace.imagePullPolicy is used instead.",
                  "type": "string"
                },
                "resources": {
                  "description": "Resources defines the resource (cpu, memory) limits and requests for the project\nclone container. To explicitly not specify a limit or request, define the resource\nquantity as zero ('0')",
                  "type": "object",
                  "properties": {
                    "claims": {
                      "description": "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.",
                      "type": "array",
                      "items": {
                        "description": "ResourceClaim references one entry in PodSpec.ResourceClaims.",
                        "type": "object",
                        "required": [
                          "name"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.",
                            "type": "string"
                          },
                          "request": {
                            "description": "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.",
                            "type": "string"
                          }
                        }
                      },
                      "x-kubernetes-list-map-keys": [
                        "name"
                      ],
                      "x-kubernetes-list-type": "map"
                    },
                    "limits": {
                      "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    },
                    "requests": {
                      "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "type": "object",
                      "additionalProperties": {
                        "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                        "x-kubernetes-int-or-string": true
                      }
                    }
                  }
                }
              }
            },
            "pvcName": {
              "description": "PVCName defines the name used for the persistent volume claim created\nto support workspace storage when the 'common' storage class is used.\nIf not specified, the default value of `claim-devworkspace` is used.\nNote that changing this configuration value after workspaces have been\ncreated will disconnect all existing workspaces from the previously-used\npersistent volume claim, and will require manual removal of the old PVCs\nin the cluster.",
              "type": "string",
              "maxLength": 63,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            },
            "runtimeClassName": {
              "description": "RuntimeClassName defines the spec.runtimeClassName for DevWorkspace pods created by the DevWorkspace Operator.",
              "type": "string"
            },
            "schedulerName": {
              "description": "SchedulerName is the name of the pod scheduler for DevWorkspace pods.\nIf not specified, the pod scheduler is set to the default scheduler on the cluster.",
              "type": "string"
            },
            "serviceAccount": {
              "description": "ServiceAccount defines configuration options for the ServiceAccount used for\nDevWorkspaces.",
              "type": "object",
              "properties": {
                "disableCreation": {
                  "description": "Disable creation of DevWorkspace ServiceAccounts by the DevWorkspace Operator. If set to true, the serviceAccountName\nfield must also be set. If ServiceAccount creation is disabled, it is assumed that the specified ServiceAccount already\nexists in any namespace where a workspace is created. If a suitable ServiceAccount does not exist, starting DevWorkspaces\nwill fail.",
                  "type": "boolean"
                },
                "serviceAccountName": {
                  "description": "ServiceAccountName defines a fixed name to be used for all DevWorkspaces. If set, the DevWorkspace\nOperator will not generate a separate ServiceAccount for each DevWorkspace, and will instead create\na ServiceAccount with the specified name in each namespace where DevWorkspaces are created. If specified,\nthe created ServiceAccount will not be removed when DevWorkspaces are deleted and must be cleaned up manually.",
                  "type": "string",
                  "maxLength": 63,
                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                },
                "serviceAccountTokens": {
                  "description": "List of ServiceAccount tokens that will be mounted into workspace pods as projected volumes.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "mountPath",
                      "name",
                      "path"
                    ],
                    "properties": {
                      "audience": {
                        "description": "Audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.",
                        "type": "string"
                      },
                      "expirationSeconds": {
                        "description": "ExpirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours. Defaults to 1 hour\nand must be at least 10 minutes.",
                        "type": "integer",
                        "format": "int64",
                        "minimum": 600
                      },
                      "mountPath": {
                        "description": "Path within the workspace container at which the token should be mounted.  Must\nnot contain ':'.",
                        "type": "string"
                      },
                      "name": {
                        "description": "Identifiable name of the ServiceAccount token.\nIf multiple ServiceAccount tokens use the same mount path, a generic name will be used\nfor the projected volume instead.",
                        "type": "string"
                      },
                      "path": {
                        "description": "Path is the path relative to the mount point of the file to project the\ntoken into.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "storageAccessMode": {
              "description": "StorageAccessMode are the desired access modes the volume should have. It defaults\nto ReadWriteOnce if not specified",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "storageClassName": {
              "description": "StorageClassName defines an optional storageClass to use for persistent\nvolume claims created to support DevWorkspaces",
              "type": "string"
            }
          }
        }
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": "string",
          "format": "date-time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": "string",
          "format": "date-time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": "string"
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": "string"
              },
              "fieldsV1": {
                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                "type": "object"
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": "string"
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": "string"
              },
              "subresource": {
                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                "type": "string"
              },
              "time": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": "object",
            "required": [
              "apiVersion",
              "kind",
              "name",
              "uid"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string"
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": "boolean"
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": "boolean"
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "name": {
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                "type": "string"
              },
              "uid": {
                "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                "type": "string"
              }
            },
            "x-kubernetes-map-type": "atomic"
          },
          "x-kubernetes-list-map-keys": [
            "uid"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "controller.devfile.io",
      "kind": "DevWorkspaceOperatorConfig",
      "version": "v1alpha1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}