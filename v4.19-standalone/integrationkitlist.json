{
  "description": "IntegrationKitList is a list of IntegrationKit",
  "type": "object",
  "required": [
    "items"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "items": {
      "description": "List of integrationkits. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
      "type": "array",
      "items": {
        "description": "IntegrationKit defines a container image and additional configuration needed to run an `Integration`.\nAn `IntegrationKit` is a generic image generally built from the requirements of an `Integration`, but agnostic to it,\nin order to be reused by any other `Integration` which has the same required set of capabilities. An `IntegrationKit`\nmay be used for other kits as a base container layer, when the `incremental` build option is enabled.",
        "type": "object",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "type": "object",
            "properties": {
              "annotations": {
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "creationTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "deletionTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-kubernetes-list-type": "set",
                "x-kubernetes-patch-strategy": "merge"
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type": "string"
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "labels": {
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "managedFields": {
                "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "type": "array",
                "items": {
                  "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type": "string"
                    },
                    "fieldsType": {
                      "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type": "string"
                    },
                    "fieldsV1": {
                      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                      "type": "object"
                    },
                    "manager": {
                      "description": "Manager is an identifier of the workflow managing these fields.",
                      "type": "string"
                    },
                    "operation": {
                      "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type": "string"
                    },
                    "subresource": {
                      "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                      "type": "string"
                    },
                    "time": {
                      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
                "type": "string"
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "type": "array",
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "type": "object",
                  "required": [
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": "boolean"
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": "boolean"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                },
                "x-kubernetes-list-map-keys": [
                  "uid"
                ],
                "x-kubernetes-list-type": "map",
                "x-kubernetes-patch-merge-key": "uid",
                "x-kubernetes-patch-strategy": "merge"
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": "string"
              },
              "selfLink": {
                "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                "type": "string"
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                "type": "string"
              }
            }
          },
          "spec": {
            "description": "the desired configuration",
            "type": "object",
            "properties": {
              "capabilities": {
                "description": "features offered by the IntegrationKit",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "configuration": {
                "description": "Deprecated:\nUse camel trait (camel.properties) to manage properties\nUse mount trait (mount.configs) to manage configs\nUse mount trait (mount.resources) to manage resources\nUse mount trait (mount.volumes) to manage volumes\nconfiguration used by the kit",
                "type": "array",
                "items": {
                  "description": "ConfigurationSpec represents a generic configuration specification.",
                  "type": "object",
                  "required": [
                    "type",
                    "value"
                  ],
                  "properties": {
                    "type": {
                      "description": "represents the type of configuration, ie: property, configmap, secret, ...",
                      "type": "string"
                    },
                    "value": {
                      "description": "the value to assign to the configuration (syntax may vary depending on the `Type`)",
                      "type": "string"
                    }
                  }
                }
              },
              "dependencies": {
                "description": "a list of Camel dependencies used by this kit",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "image": {
                "description": "the container image as identified in the container registry",
                "type": "string"
              },
              "profile": {
                "description": "the profile which is expected by this kit",
                "type": "string"
              },
              "repositories": {
                "description": "Maven repositories that can be used by the kit",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "sources": {
                "description": "the sources to add at build time",
                "type": "array",
                "items": {
                  "description": "SourceSpec defines the configuration for one or more routes to be executed in a certain Camel DSL language.",
                  "type": "object",
                  "properties": {
                    "compression": {
                      "description": "if the content is compressed (base64 encrypted)",
                      "type": "boolean"
                    },
                    "content": {
                      "description": "the source code (plain text)",
                      "type": "string"
                    },
                    "contentKey": {
                      "description": "the confimap key holding the source content",
                      "type": "string"
                    },
                    "contentRef": {
                      "description": "the confimap reference holding the source content",
                      "type": "string"
                    },
                    "contentType": {
                      "description": "the content type (tipically text or binary)",
                      "type": "string"
                    },
                    "from-kamelet": {
                      "description": "True if the spec is generated from a Kamelet",
                      "type": "boolean"
                    },
                    "interceptors": {
                      "description": "Interceptors are optional identifiers the org.apache.camel.k.RoutesLoader\nuses to pre/post process sources\nDeprecated: no longer in use.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "language": {
                      "description": "specify which is the language (Camel DSL) used to interpret this source code",
                      "type": "string"
                    },
                    "loader": {
                      "description": "Loader is an optional id of the org.apache.camel.k.RoutesLoader that will\ninterpret this source at runtime",
                      "type": "string"
                    },
                    "name": {
                      "description": "the name of the specification",
                      "type": "string"
                    },
                    "path": {
                      "description": "the path where the file is stored",
                      "type": "string"
                    },
                    "property-names": {
                      "description": "List of property names defined in the source (e.g. if type is \"template\")",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "rawContent": {
                      "description": "the source code (binary)",
                      "type": "string",
                      "format": "byte"
                    },
                    "type": {
                      "description": "Type defines the kind of source described by this object",
                      "type": "string"
                    }
                  }
                }
              },
              "traits": {
                "description": "traits that the kit will execute",
                "type": "object",
                "properties": {
                  "addons": {
                    "description": "The collection of addon trait configurations",
                    "type": "object",
                    "additionalProperties": {
                      "description": "AddonTrait represents the configuration of an addon trait.",
                      "x-kubernetes-preserve-unknown-fields": true
                    }
                  },
                  "builder": {
                    "description": "The builder trait is internally used to determine the best strategy to build and configure IntegrationKits.",
                    "type": "object",
                    "properties": {
                      "annotations": {
                        "description": "When using `pod` strategy, annotation to use for the builder pod.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "baseImage": {
                        "description": "Specify a base image. In order to have the application working properly it must be a container image which has a Java JDK\ninstalled and ready to use on path (ie `/usr/bin/java`).",
                        "type": "string"
                      },
                      "configuration": {
                        "description": "Legacy trait configuration parameters.\nDeprecated: for backward compatibility.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "enabled": {
                        "description": "Deprecated: no longer in use.",
                        "type": "boolean"
                      },
                      "incrementalImageBuild": {
                        "description": "Use the incremental image build option, to reuse existing containers (default `true`)",
                        "type": "boolean"
                      },
                      "limitCPU": {
                        "description": "When using `pod` strategy, the maximum amount of CPU required by the pod builder.\nDeprecated: use TasksRequestCPU instead with task name `builder`.",
                        "type": "string"
                      },
                      "limitMemory": {
                        "description": "When using `pod` strategy, the maximum amount of memory required by the pod builder.\nDeprecated: use TasksRequestCPU instead with task name `builder`.",
                        "type": "string"
                      },
                      "mavenProfiles": {
                        "description": "A list of references pointing to configmaps/secrets that contains a maven profile.\nThis configmap/secret is a resource of the IntegrationKit created, therefore it needs to be present in the namespace where the operator is going to create the IntegrationKit.\nThe content of the maven profile is expected to be a text containing a valid maven profile starting with `<profile>` and ending with `</profile>` that will be integrated as an inline profile in the POM.\nSyntax: [configmap|secret]:name[/key], where name represents the resource name, key optionally represents the resource key to be filtered (default key value = profile.xml).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "nodeSelector": {
                        "description": "Defines a set of nodes the builder pod is eligible to be scheduled on, based on labels on the node.",
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "orderStrategy": {
                        "description": "The build order strategy to use, either `dependencies`, `fifo` or `sequential` (default is the platform default)",
                        "type": "string",
                        "enum": [
                          "dependencies",
                          "fifo",
                          "sequential"
                        ]
                      },
                      "platforms": {
                        "description": "The list of manifest platforms to use to build a container image (default `linux/amd64`).",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "properties": {
                        "description": "A list of properties to be provided to the build task",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "requestCPU": {
                        "description": "When using `pod` strategy, the minimum amount of CPU required by the pod builder.\nDeprecated: use TasksRequestCPU instead with task name `builder`.",
                        "type": "string"
                      },
                      "requestMemory": {
                        "description": "When using `pod` strategy, the minimum amount of memory required by the pod builder.\nDeprecated: use TasksRequestCPU instead with task name `builder`.",
                        "type": "string"
                      },
                      "strategy": {
                        "description": "The strategy to use, either `pod` or `routine` (default `routine`)",
                        "type": "string",
                        "enum": [
                          "pod",
                          "routine"
                        ]
                      },
                      "tasks": {
                        "description": "A list of tasks to be executed (available only when using `pod` strategy) with format `<name>;<container-image>;<container-command>`.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "tasksFilter": {
                        "description": "A list of tasks sorted by the order of execution in a csv format, ie, `<taskName1>,<taskName2>,...`.\nMind that you must include also the operator tasks (`builder`, `quarkus-native`, `package`, `jib`, `s2i`)\nif you need to execute them. Useful only with `pod` strategy.",
                        "type": "string"
                      },
                      "tasksLimitCPU": {
                        "description": "A list of limit cpu configuration for the specific task with format `<task-name>:<limit-cpu-conf>`.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "tasksLimitMemory": {
                        "description": "A list of limit memory configuration for the specific task with format `<task-name>:<limit-memory-conf>`.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "tasksRequestCPU": {
                        "description": "A list of request cpu configuration for the specific task with format `<task-name>:<request-cpu-conf>`.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "tasksRequestMemory": {
                        "description": "A list of request memory configuration for the specific task with format `<task-name>:<request-memory-conf>`.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "verbose": {
                        "description": "Enable verbose logging on build components that support it (e.g. Kaniko build pod).\nDeprecated no longer in use",
                        "type": "boolean"
                      }
                    }
                  },
                  "camel": {
                    "description": "The Camel trait sets up Camel configuration.",
                    "type": "object",
                    "properties": {
                      "configuration": {
                        "description": "Legacy trait configuration parameters.\nDeprecated: for backward compatibility.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "enabled": {
                        "description": "Deprecated: no longer in use.",
                        "type": "boolean"
                      },
                      "properties": {
                        "description": "A list of properties to be provided to the Integration runtime",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "runtimeProvider": {
                        "description": "The runtime provider to use for the integration. (Default, Camel K Runtime).",
                        "type": "string",
                        "enum": [
                          "quarkus",
                          "plain-quarkus"
                        ]
                      },
                      "runtimeVersion": {
                        "description": "The runtime version to use for the integration. It overrides the default version set in the Integration Platform.\nYou can use a fixed version (for example \"3.2.3\") or a semantic version (for example \"3.x\") which will try to resolve\nto the best matching Catalog existing on the cluster (Default, the one provided by the operator version).",
                        "type": "string"
                      }
                    }
                  },
                  "quarkus": {
                    "description": "The Quarkus trait configures the Quarkus runtime.\nIt's enabled by default.\nNOTE: Compiling to a native executable, requires at least 4GiB of memory, so the Pod running the native build must have enough memory available.",
                    "type": "object",
                    "properties": {
                      "buildMode": {
                        "description": "The Quarkus mode to run: either `jvm` or `native` (default `jvm`).\nIn case both `jvm` and `native` are specified, two `IntegrationKit` resources are created,\nwith the `native` kit having precedence over the `jvm` one once ready.",
                        "type": "array",
                        "items": {
                          "description": "QuarkusMode is the type of Quarkus build packaging.",
                          "type": "string",
                          "enum": [
                            "jvm",
                            "native"
                          ]
                        }
                      },
                      "configuration": {
                        "description": "Legacy trait configuration parameters.\nDeprecated: for backward compatibility.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "enabled": {
                        "description": "Deprecated: no longer in use.",
                        "type": "boolean"
                      },
                      "nativeBaseImage": {
                        "description": "The base image to use when running a native build (default `quay.io/quarkus/quarkus-micro-image:2.0`)",
                        "type": "string"
                      },
                      "nativeBuilderImage": {
                        "description": "The image containing the tooling required for a native build (by default it will use the one provided in the runtime catalog)",
                        "type": "string"
                      },
                      "packageTypes": {
                        "description": "The Quarkus package types, `fast-jar` or `native` (default `fast-jar`).\nIn case both `fast-jar` and `native` are specified, two `IntegrationKit` resources are created,\nwith the native kit having precedence over the `fast-jar` one once ready.\nThe order influences the resolution of the current kit for the integration.\nThe kit corresponding to the first package type will be assigned to the\nintegration in case no existing kit that matches the integration exists.\nDeprecated: use `build-mode` instead.",
                        "type": "array",
                        "items": {
                          "description": "QuarkusPackageType is the type of Quarkus build packaging.\nDeprecated: use `QuarkusMode` instead.",
                          "type": "string",
                          "enum": [
                            "fast-jar",
                            "native"
                          ]
                        }
                      }
                    }
                  },
                  "registry": {
                    "description": "The Registry trait sets up Maven to use the Image registry as a Maven repository (support removed since version 2.5.0).\nDeprecated: use jvm trait or read documentation.",
                    "type": "object",
                    "properties": {
                      "configuration": {
                        "description": "Legacy trait configuration parameters.\nDeprecated: for backward compatibility.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "enabled": {
                        "description": "Can be used to enable or disable a trait. All traits share this common property.",
                        "type": "boolean"
                      }
                    }
                  }
                }
              }
            }
          },
          "status": {
            "description": "the actual status",
            "type": "object",
            "properties": {
              "artifacts": {
                "description": "list of artifacts used by the kit",
                "type": "array",
                "items": {
                  "description": "Artifact represents a materialized artifact (a jar dependency or in general a file used by the build).",
                  "type": "object",
                  "required": [
                    "id"
                  ],
                  "properties": {
                    "checksum": {
                      "description": "a checksum (SHA1) of the content",
                      "type": "string"
                    },
                    "id": {
                      "description": "the identification (GAV for maven dependencies or file name for other file types)",
                      "type": "string"
                    },
                    "location": {
                      "description": "where it is located in the builder `Pod`",
                      "type": "string"
                    },
                    "target": {
                      "description": "the expected location in the runtime",
                      "type": "string"
                    }
                  }
                }
              },
              "baseImage": {
                "description": "base image used by the kit (could be another IntegrationKit)",
                "type": "string"
              },
              "catalog": {
                "description": "the catalog used to build/operate the IntegrationKit.",
                "type": "object",
                "properties": {
                  "provider": {
                    "description": "RuntimeProvider is the provider chosen for the runtime.",
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  }
                }
              },
              "conditions": {
                "description": "a list of conditions which happened for the events related the kit",
                "type": "array",
                "items": {
                  "description": "IntegrationKitCondition describes the state of a resource at a certain point.",
                  "type": "object",
                  "required": [
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "Last time the condition transitioned from one status to another.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "lastUpdateTime": {
                      "description": "The last time this condition was updated.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "A human-readable message indicating details about the transition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "The reason for the condition's last transition.",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the condition, one of True, False, Unknown.",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of integration condition.",
                      "type": "string"
                    }
                  }
                }
              },
              "digest": {
                "description": "actual image digest of the kit",
                "type": "string"
              },
              "failure": {
                "description": "failure reason (if any)",
                "type": "object",
                "required": [
                  "reason",
                  "recovery",
                  "time"
                ],
                "properties": {
                  "reason": {
                    "description": "a short text specifying the reason",
                    "type": "string"
                  },
                  "recovery": {
                    "description": "the recovery attempted for this failure",
                    "type": "object",
                    "required": [
                      "attempt",
                      "attemptMax"
                    ],
                    "properties": {
                      "attempt": {
                        "description": "attempt number",
                        "type": "integer"
                      },
                      "attemptMax": {
                        "description": "maximum number of attempts",
                        "type": "integer"
                      },
                      "attemptTime": {
                        "description": "time of the attempt execution",
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  },
                  "time": {
                    "description": "the time when the failure has happened",
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "image": {
                "description": "actual image name of the kit",
                "type": "string"
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the most recent generation observed for this IntegrationKit.",
                "type": "integer",
                "format": "int64"
              },
              "phase": {
                "description": "phase of the kit",
                "type": "string"
              },
              "platform": {
                "description": "the platform for which this kit was configured",
                "type": "string"
              },
              "rootImage": {
                "description": "root image used by the kit (the first image from which the incremental image has started, typically a JDK/JRE base image)",
                "type": "string"
              },
              "runtimeProvider": {
                "description": "the runtime provider for which this kit was configured",
                "type": "string"
              },
              "runtimeVersion": {
                "description": "the runtime version for which this kit was configured",
                "type": "string"
              },
              "version": {
                "description": "the Camel K operator version for which this kit was configured",
                "type": "string"
              }
            }
          }
        },
        "x-kubernetes-group-version-kind": [
          {
            "group": "camel.apache.org",
            "kind": "IntegrationKit",
            "version": "v1"
          }
        ],
        "x-kubernetes-selectable-fields": []
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": "object",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "camel.apache.org",
      "kind": "IntegrationKitList",
      "version": "v1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}