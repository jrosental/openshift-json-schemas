{
  "description": "KnativeKafkaList is a list of KnativeKafka",
  "type": "object",
  "required": [
    "items"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "items": {
      "description": "List of knativekafkas. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
      "type": "array",
      "items": {
        "description": "KnativeKafka is the Schema for the knativekafkas API",
        "type": "object",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "type": "object",
            "properties": {
              "annotations": {
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "creationTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "deletionTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-kubernetes-list-type": "set",
                "x-kubernetes-patch-strategy": "merge"
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type": "string"
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "labels": {
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "managedFields": {
                "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "type": "array",
                "items": {
                  "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type": "string"
                    },
                    "fieldsType": {
                      "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type": "string"
                    },
                    "fieldsV1": {
                      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                      "type": "object"
                    },
                    "manager": {
                      "description": "Manager is an identifier of the workflow managing these fields.",
                      "type": "string"
                    },
                    "operation": {
                      "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type": "string"
                    },
                    "subresource": {
                      "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                      "type": "string"
                    },
                    "time": {
                      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
                "type": "string"
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "type": "array",
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "type": "object",
                  "required": [
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": "boolean"
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": "boolean"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                },
                "x-kubernetes-list-map-keys": [
                  "uid"
                ],
                "x-kubernetes-list-type": "map",
                "x-kubernetes-patch-merge-key": "uid",
                "x-kubernetes-patch-strategy": "merge"
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": "string"
              },
              "selfLink": {
                "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                "type": "string"
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                "type": "string"
              }
            }
          },
          "spec": {
            "description": "KnativeKafkaSpec defines the desired state of the KnativeKafka (from the client).",
            "type": "object",
            "required": [
              "channel",
              "source"
            ],
            "properties": {
              "broker": {
                "description": "Allows configuration for KafkaBroker installation",
                "type": "object",
                "required": [
                  "enabled"
                ],
                "properties": {
                  "defaultConfig": {
                    "description": "Takes the default configuration settings for Kafka based brokers",
                    "type": "object",
                    "properties": {
                      "authSecretName": {
                        "description": "AuthSecretName is the name of the secret that contains Kafka auth configuration for the Broker.",
                        "type": "string"
                      },
                      "bootstrapServers": {
                        "description": "BootstrapServers is comma separated string of bootstrapservers that the KafkaBrokers will use",
                        "type": "string"
                      },
                      "numPartitions": {
                        "description": "NumPartitions is the number of partitions of a Kafka topic. By default, it is set to 10.",
                        "type": "integer"
                      },
                      "replicationFactor": {
                        "description": "ReplicationFactor is the replication factor of a Kafka topic. By default, it is set to 3.",
                        "type": "integer",
                        "maximum": 32767
                      }
                    }
                  },
                  "enabled": {
                    "description": "Enabled defines if the KafkaBroker installation is enabled",
                    "type": "boolean"
                  }
                }
              },
              "channel": {
                "description": "Allows configuration for KafkaChannel installation",
                "type": "object",
                "required": [
                  "enabled"
                ],
                "properties": {
                  "authSecretName": {
                    "description": "AuthSecretName is the name of the secret that contains Kafka auth configuration.",
                    "type": "string"
                  },
                  "authSecretNamespace": {
                    "description": "AuthSecretNamespace is the namespace of the secret that contains Kafka auth configuration.",
                    "type": "string"
                  },
                  "bootstrapServers": {
                    "description": "BootstrapServers is comma separated string of bootstrapservers that the KafkaChannels will use",
                    "type": "string"
                  },
                  "enabled": {
                    "description": "Enabled defines if the KafkaChannel installation is enabled",
                    "type": "boolean"
                  }
                }
              },
              "config": {
                "description": "A means to override the corresponding entries in the upstream configmaps",
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              },
              "high-availability": {
                "description": "Allows specification of HA control plane",
                "type": "object",
                "properties": {
                  "replicas": {
                    "description": "The number of replicas that HA parts of the control plane will be scaled to",
                    "type": "integer",
                    "minimum": 1
                  }
                }
              },
              "logging": {
                "description": "Set logging configuration of the data plane (receivers and dispatchers). It is not recommended to use DEBUG or TRACE in production since it's too verbose and degrades performance.",
                "type": "object",
                "properties": {
                  "level": {
                    "description": "Defines the log level. Allowed values are 'TRACE', 'DEBUG', 'INFO', 'WARN' and 'ERROR'. The default value is 'INFO'.",
                    "type": "string",
                    "enum": [
                      "TRACE",
                      "DEBUG",
                      "INFO",
                      "WARN",
                      "ERROR"
                    ]
                  }
                }
              },
              "sink": {
                "description": "Allows configuration for KafkaSink installation",
                "type": "object",
                "required": [
                  "enabled"
                ],
                "properties": {
                  "enabled": {
                    "description": "Enabled defines if the KafkaSink installation is enabled",
                    "type": "boolean"
                  }
                }
              },
              "source": {
                "description": "Allows configuration for KafkaSource installation",
                "type": "object",
                "required": [
                  "enabled"
                ],
                "properties": {
                  "enabled": {
                    "description": "Enabled defines if the KafkaSource installation is enabled",
                    "type": "boolean"
                  }
                }
              },
              "workloads": {
                "description": "A mapping of deployment or statefulset name to override",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "affinity": {
                      "description": "If specified, the pod's scheduling constraints.",
                      "type": "object",
                      "properties": {
                        "nodeAffinity": {
                          "description": "Describes node affinity scheduling rules for the pod.",
                          "type": "object",
                          "properties": {
                            "preferredDuringSchedulingIgnoredDuringExecution": {
                              "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
                              "type": "array",
                              "items": {
                                "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
                                "type": "object",
                                "required": [
                                  "preference",
                                  "weight"
                                ],
                                "properties": {
                                  "preference": {
                                    "description": "A node selector term, associated with the corresponding weight.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "description": "A list of node selector requirements by node's labels.",
                                        "type": "array",
                                        "items": {
                                          "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "The label key that the selector applies to.",
                                              "type": "string"
                                            },
                                            "operator": {
                                              "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                              "type": "string"
                                            },
                                            "values": {
                                              "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "matchFields": {
                                        "description": "A list of node selector requirements by node's fields.",
                                        "type": "array",
                                        "items": {
                                          "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "The label key that the selector applies to.",
                                              "type": "string"
                                            },
                                            "operator": {
                                              "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                              "type": "string"
                                            },
                                            "values": {
                                              "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "weight": {
                                    "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
                                    "type": "integer",
                                    "format": "int32"
                                  }
                                }
                              }
                            },
                            "requiredDuringSchedulingIgnoredDuringExecution": {
                              "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.",
                              "type": "object",
                              "required": [
                                "nodeSelectorTerms"
                              ],
                              "properties": {
                                "nodeSelectorTerms": {
                                  "description": "Required. A list of node selector terms. The terms are ORed.",
                                  "type": "array",
                                  "items": {
                                    "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "description": "A list of node selector requirements by node's labels.",
                                        "type": "array",
                                        "items": {
                                          "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "The label key that the selector applies to.",
                                              "type": "string"
                                            },
                                            "operator": {
                                              "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                              "type": "string"
                                            },
                                            "values": {
                                              "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "matchFields": {
                                        "description": "A list of node selector requirements by node's fields.",
                                        "type": "array",
                                        "items": {
                                          "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "The label key that the selector applies to.",
                                              "type": "string"
                                            },
                                            "operator": {
                                              "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
                                              "type": "string"
                                            },
                                            "values": {
                                              "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "podAffinity": {
                          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).",
                          "type": "object",
                          "properties": {
                            "preferredDuringSchedulingIgnoredDuringExecution": {
                              "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                              "type": "array",
                              "items": {
                                "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                "type": "object",
                                "required": [
                                  "podAffinityTerm",
                                  "weight"
                                ],
                                "properties": {
                                  "podAffinityTerm": {
                                    "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                    "type": "object",
                                    "required": [
                                      "topologyKey"
                                    ],
                                    "properties": {
                                      "labelSelector": {
                                        "description": "A label query over a set of resources, in this case pods.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                            "type": "array",
                                            "items": {
                                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "key is the label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "matchLabels": {
                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "namespaces": {
                                        "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      },
                                      "topologyKey": {
                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "weight": {
                                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                    "type": "integer",
                                    "format": "int32"
                                  }
                                }
                              }
                            },
                            "requiredDuringSchedulingIgnoredDuringExecution": {
                              "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                              "type": "array",
                              "items": {
                                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                "type": "object",
                                "required": [
                                  "topologyKey"
                                ],
                                "properties": {
                                  "labelSelector": {
                                    "description": "A label query over a set of resources, in this case pods.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "type": "array",
                                        "items": {
                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "key is the label key that the selector applies to.",
                                              "type": "string"
                                            },
                                            "operator": {
                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                              "type": "string"
                                            },
                                            "values": {
                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "matchLabels": {
                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "namespaces": {
                                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "topologyKey": {
                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "podAntiAffinity": {
                          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).",
                          "type": "object",
                          "properties": {
                            "preferredDuringSchedulingIgnoredDuringExecution": {
                              "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
                              "type": "array",
                              "items": {
                                "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
                                "type": "object",
                                "required": [
                                  "podAffinityTerm",
                                  "weight"
                                ],
                                "properties": {
                                  "podAffinityTerm": {
                                    "description": "Required. A pod affinity term, associated with the corresponding weight.",
                                    "type": "object",
                                    "required": [
                                      "topologyKey"
                                    ],
                                    "properties": {
                                      "labelSelector": {
                                        "description": "A label query over a set of resources, in this case pods.",
                                        "type": "object",
                                        "properties": {
                                          "matchExpressions": {
                                            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                            "type": "array",
                                            "items": {
                                              "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                              "type": "object",
                                              "required": [
                                                "key",
                                                "operator"
                                              ],
                                              "properties": {
                                                "key": {
                                                  "description": "key is the label key that the selector applies to.",
                                                  "type": "string"
                                                },
                                                "operator": {
                                                  "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                                  "type": "string"
                                                },
                                                "values": {
                                                  "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "matchLabels": {
                                            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "namespaces": {
                                        "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      },
                                      "topologyKey": {
                                        "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "weight": {
                                    "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
                                    "type": "integer",
                                    "format": "int32"
                                  }
                                }
                              }
                            },
                            "requiredDuringSchedulingIgnoredDuringExecution": {
                              "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
                              "type": "array",
                              "items": {
                                "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
                                "type": "object",
                                "required": [
                                  "topologyKey"
                                ],
                                "properties": {
                                  "labelSelector": {
                                    "description": "A label query over a set of resources, in this case pods.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "type": "array",
                                        "items": {
                                          "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                                          "type": "object",
                                          "required": [
                                            "key",
                                            "operator"
                                          ],
                                          "properties": {
                                            "key": {
                                              "description": "key is the label key that the selector applies to.",
                                              "type": "string"
                                            },
                                            "operator": {
                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                                              "type": "string"
                                            },
                                            "values": {
                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "matchLabels": {
                                        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "type": "object",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "namespaces": {
                                    "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "topologyKey": {
                                    "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "annotations": {
                      "description": "Annotations overrides labels for the deployment and its template.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "env": {
                      "description": "Env overrides env vars for the containers.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "container"
                        ],
                        "properties": {
                          "container": {
                            "description": "The container name",
                            "type": "string"
                          },
                          "envVars": {
                            "description": "The desired EnvVarRequirements",
                            "type": "array",
                            "items": {
                              "description": "EnvVar represents an environment variable present in a Container.",
                              "type": "object",
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
                                  "type": "string"
                                },
                                "value": {
                                  "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
                                  "type": "string"
                                },
                                "valueFrom": {
                                  "description": "Source for the environment variable's value. Cannot be used if value is not empty.",
                                  "type": "object",
                                  "properties": {
                                    "configMapKeyRef": {
                                      "description": "Selects a key of a ConfigMap.",
                                      "type": "object",
                                      "required": [
                                        "key"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "The key to select.",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                          "type": "string"
                                        },
                                        "optional": {
                                          "description": "Specify whether the ConfigMap or its key must be defined",
                                          "type": "boolean"
                                        }
                                      }
                                    },
                                    "fieldRef": {
                                      "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
                                      "type": "object",
                                      "required": [
                                        "fieldPath"
                                      ],
                                      "properties": {
                                        "apiVersion": {
                                          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
                                          "type": "string"
                                        },
                                        "fieldPath": {
                                          "description": "Path of the field to select in the specified API version.",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "resourceFieldRef": {
                                      "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
                                      "type": "object",
                                      "required": [
                                        "resource"
                                      ],
                                      "properties": {
                                        "containerName": {
                                          "description": "Container name: required for volumes, optional for env vars",
                                          "type": "string"
                                        },
                                        "divisor": {
                                          "description": "Specifies the output format of the exposed resources, defaults to \"1\"",
                                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                                          "x-kubernetes-int-or-string": true
                                        },
                                        "resource": {
                                          "description": "Required: resource to select",
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "secretKeyRef": {
                                      "description": "Selects a key of a secret in the pod's namespace",
                                      "type": "object",
                                      "required": [
                                        "key"
                                      ],
                                      "properties": {
                                        "key": {
                                          "description": "The key of the secret to select from.  Must be a valid secret key.",
                                          "type": "string"
                                        },
                                        "name": {
                                          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
                                          "type": "string"
                                        },
                                        "optional": {
                                          "description": "Specify whether the Secret or its key must be defined",
                                          "type": "boolean"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "labels": {
                      "description": "Labels overrides labels for the deployment and its template.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "livenessProbes": {
                      "description": "LivenessProbes overrides liveness probes for the containers.",
                      "type": "array",
                      "items": {
                        "description": "ProbesRequirementsOverride enables the user to override any container's env vars.",
                        "type": "object",
                        "required": [
                          "container"
                        ],
                        "properties": {
                          "container": {
                            "description": "The container name",
                            "type": "string"
                          },
                          "failureThreshold": {
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "initialDelaySeconds": {
                            "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                            "type": "integer",
                            "format": "int32"
                          },
                          "periodSeconds": {
                            "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "successThreshold": {
                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "terminationGracePeriodSeconds": {
                            "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "timeoutSeconds": {
                            "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "name": {
                      "description": "The name of the deployment",
                      "type": "string"
                    },
                    "nodeSelector": {
                      "description": "NodeSelector overrides nodeSelector for the deployment.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "readinessProbes": {
                      "description": "ReadinessProbes overrides readiness probes for the containers.",
                      "type": "array",
                      "items": {
                        "description": "ProbesRequirementsOverride enables the user to override any container's env vars.",
                        "type": "object",
                        "required": [
                          "container"
                        ],
                        "properties": {
                          "container": {
                            "description": "The container name",
                            "type": "string"
                          },
                          "failureThreshold": {
                            "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "initialDelaySeconds": {
                            "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                            "type": "integer",
                            "format": "int32"
                          },
                          "periodSeconds": {
                            "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "successThreshold": {
                            "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
                            "type": "integer",
                            "format": "int32"
                          },
                          "terminationGracePeriodSeconds": {
                            "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "timeoutSeconds": {
                            "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
                            "type": "integer",
                            "format": "int32"
                          }
                        }
                      }
                    },
                    "replicas": {
                      "description": "The number of replicas that HA parts of the control plane will be scaled to",
                      "type": "integer",
                      "minimum": 0
                    },
                    "resources": {
                      "description": "If specified, the container's resources.",
                      "type": "array",
                      "items": {
                        "description": "The pod this Resource is used to specify the requests and limits for a certain container based on the name.",
                        "type": "object",
                        "properties": {
                          "container": {
                            "description": "The name of the container",
                            "type": "string"
                          },
                          "limits": {
                            "type": "object",
                            "properties": {
                              "cpu": {
                                "type": "string",
                                "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$"
                              },
                              "memory": {
                                "type": "string",
                                "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$"
                              }
                            }
                          },
                          "requests": {
                            "type": "object",
                            "properties": {
                              "cpu": {
                                "type": "string",
                                "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$"
                              },
                              "memory": {
                                "type": "string",
                                "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$"
                              }
                            }
                          }
                        }
                      }
                    },
                    "tolerations": {
                      "description": "If specified, the pod's tolerations.",
                      "type": "array",
                      "items": {
                        "description": "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
                        "type": "object",
                        "properties": {
                          "effect": {
                            "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
                            "type": "string"
                          },
                          "key": {
                            "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
                            "type": "string"
                          },
                          "tolerationSeconds": {
                            "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
                            "type": "integer",
                            "format": "int64"
                          },
                          "value": {
                            "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "status": {
            "description": "KnativeKafkaStatus defines the observed state of KnativeKafka (from the controller).",
            "type": "object",
            "properties": {
              "annotations": {
                "description": "Annotations is additional Status fields for the Resource to save some additional State as well as convey more information to the user. This is roughly akin to Annotations on any k8s resource, just the reconciler conveying richer information outwards.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "conditions": {
                "description": "Conditions the latest available observations of a resource's current state. +patchMergeKey=type +patchStrategy=merge",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "type",
                    "status"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "LastTransitionTime is the last time the condition transitioned from one status to another. We use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic differences (all other things held constant).",
                      "type": "string"
                    },
                    "message": {
                      "description": "A human readable message indicating details about the transition.",
                      "type": "string"
                    },
                    "reason": {
                      "description": "The reason for the condition's last transition.",
                      "type": "string"
                    },
                    "severity": {
                      "description": "Severity with which to treat failures of this type of condition. When this is not specified, it defaults to Error.",
                      "type": "string"
                    },
                    "status": {
                      "description": "Status of the condition, one of True, False, Unknown. +required",
                      "type": "string"
                    },
                    "type": {
                      "description": "Type of condition. +required",
                      "type": "string"
                    }
                  }
                }
              },
              "observedGeneration": {
                "description": "ObservedGeneration is the 'Generation' of the Service that was last processed by the controller.",
                "type": "integer",
                "format": "int64"
              },
              "version": {
                "description": "The version of the installed release",
                "type": "string"
              }
            }
          }
        },
        "x-kubernetes-group-version-kind": [
          {
            "group": "operator.serverless.openshift.io",
            "kind": "KnativeKafka",
            "version": "v1alpha1"
          }
        ],
        "x-kubernetes-selectable-fields": []
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": "object",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "operator.serverless.openshift.io",
      "kind": "KnativeKafkaList",
      "version": "v1alpha1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}