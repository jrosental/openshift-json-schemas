{
  "description": "Provisioning contains configuration used by the Provisioning\nservice (Ironic) to provision baremetal hosts.\nProvisioning is created by the OpenShift installer using admin or\nuser provided information about the provisioning network and the\nNIC on the server that can be used to PXE boot it.\nThis CR is a singleton, created by the installer and currently only\nconsumed by the cluster-baremetal-operator to bring up and update\ncontainers in a metal3 cluster.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creationTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": "string",
          "format": "date-time"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "deletionTimestamp": {
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "type": "string",
          "format": "date-time"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-kubernetes-list-type": "set",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "type": "array",
          "items": {
            "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
            "type": "object",
            "properties": {
              "apiVersion": {
                "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                "type": "string"
              },
              "fieldsType": {
                "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                "type": "string"
              },
              "fieldsV1": {
                "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                "type": "object"
              },
              "manager": {
                "description": "Manager is an identifier of the workflow managing these fields.",
                "type": "string"
              },
              "operation": {
                "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                "type": "string"
              },
              "subresource": {
                "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                "type": "string"
              },
              "time": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              }
            }
          },
          "x-kubernetes-list-type": "atomic"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "type": "array",
          "items": {
            "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
            "type": "object",
            "required": [
              "apiVersion",
              "kind",
              "name",
              "uid"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": "string"
              },
              "blockOwnerDeletion": {
                "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                "type": "boolean"
              },
              "controller": {
                "description": "If true, this reference points to the managing controller.",
                "type": "boolean"
              },
              "kind": {
                "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": "string"
              },
              "name": {
                "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                "type": "string"
              },
              "uid": {
                "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                "type": "string"
              }
            },
            "x-kubernetes-map-type": "atomic"
          },
          "x-kubernetes-list-map-keys": [
            "uid"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
          "type": "string"
        }
      }
    },
    "spec": {
      "description": "ProvisioningSpec defines the desired state of Provisioning",
      "type": "object",
      "properties": {
        "additionalNTPServers": {
          "description": "AdditionalNTPServers is a list of NTP Servers to be used by the\nprovisioning service",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bootIsoSource": {
          "description": "BootIsoSource provides a way to set the location where the iso image\nto boot the nodes will be served from.\nBy default the boot iso image is cached locally and served from\nthe Provisioning service (Ironic) nodes using an auxiliary httpd server.\nIf the boot iso image is already served by an httpd server, setting\nthis option to http allows to directly provide the image from there;\nin this case, the network (either internal or external) where the\nhttpd server that hosts the boot iso is needs to be accessible\nby the metal3 pod.",
          "type": "string",
          "enum": [
            "local",
            "http"
          ]
        },
        "disableVirtualMediaTLS": {
          "description": "DisableVirtualMediaTLS turns off TLS on the virtual media server,\nwhich may be required for hardware that cannot accept HTTPS links.",
          "type": "boolean"
        },
        "preProvisioningOSDownloadURLs": {
          "description": "PreprovisioningOSDownloadURLs is set of CoreOS Live URLs that would be necessary to provision a worker\neither using virtual media or PXE.",
          "type": "object",
          "properties": {
            "initramfsURL": {
              "description": "InitramfsURL Image URL to be used for PXE deployments",
              "type": "string"
            },
            "isoURL": {
              "description": "IsoURL Image URL to be used for Live ISO deployments",
              "type": "string"
            },
            "kernelURL": {
              "description": "KernelURL is an Image URL to be used for PXE deployments",
              "type": "string"
            },
            "rootfsURL": {
              "description": "RootfsURL Image URL to be used for PXE deployments",
              "type": "string"
            }
          }
        },
        "provisioningDHCPExternal": {
          "description": "ProvisioningDHCPExternal indicates whether the DHCP server\nfor IP addresses in the provisioning DHCP range is present\nwithin the metal3 cluster or external to it. This field is being\ndeprecated in favor of provisioningNetwork.",
          "type": "boolean"
        },
        "provisioningDHCPRange": {
          "description": "ProvisioningDHCPRange needs to be interpreted along with\nProvisioningDHCPExternal. If the value of\nprovisioningDHCPExternal is set to False, then\nProvisioningDHCPRange represents the range of IP addresses\nthat the DHCP server running within the metal3 cluster can\nuse while provisioning baremetal servers. If the value of\nProvisioningDHCPExternal is set to True, then the value of\nProvisioningDHCPRange will be ignored. When the value of\nProvisioningDHCPExternal is set to False, indicating an\ninternal DHCP server and the value of ProvisioningDHCPRange\nis not set, then the DHCP range is taken to be the default\nrange which goes from .10 to .100 of the\nProvisioningNetworkCIDR. This is the only value in all of\nthe Provisioning configuration that can be changed after\nthe installer has created the CR. This value needs to be\ntwo comma sererated IP addresses within the\nProvisioningNetworkCIDR where the 1st address represents\nthe start of the range and the 2nd address represents the\nlast usable address in the  range.",
          "type": "string"
        },
        "provisioningDNS": {
          "description": "ProvisioningDNS allows sending the DNS information via DHCP on the\nprovisionig network. It is off by default since the Provisioning\nservice itself (Ironic) does not require DNS, but it may be useful\nfor layered products (e.g. ZTP).",
          "type": "boolean"
        },
        "provisioningIP": {
          "description": "ProvisioningIP is the IP address assigned to the\nprovisioningInterface of the baremetal server. This IP\naddress should be within the provisioning subnet, and\noutside of the DHCP range.",
          "type": "string"
        },
        "provisioningInterface": {
          "description": "ProvisioningInterface is the name of the network interface\non a baremetal server to the provisioning network. It can\nhave values like eth1 or ens3.",
          "type": "string"
        },
        "provisioningMacAddresses": {
          "description": "ProvisioningMacAddresses is a list of mac addresses of network interfaces\non a baremetal server to the provisioning network.\nUse this instead of ProvisioningInterface to allow interfaces of different\nnames. If not provided it will be populated by the BMH.Spec.BootMacAddress\nof each master.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "provisioningNetwork": {
          "description": "ProvisioningNetwork provides a way to indicate the state of the\nunderlying network configuration for the provisioning network.\nThis field can have one of the following values -\n`Managed`- when the provisioning network is completely managed by\nthe Baremetal IPI solution.\n`Unmanaged`- when the provsioning network is present and used but\nthe user is responsible for managing DHCP. Virtual media provisioning\nis recommended but PXE is still available if required.\n`Disabled`- when the provisioning network is fully disabled. User can\nbring up the baremetal cluster using virtual media or assisted\ninstallation. If using metal3 for power management, BMCs must be\naccessible from the machine networks. User should provide two IPs on\nthe external network that would be used for provisioning services.",
          "type": "string",
          "enum": [
            "Managed",
            "Unmanaged",
            "Disabled"
          ]
        },
        "provisioningNetworkCIDR": {
          "description": "ProvisioningNetworkCIDR is the network on which the\nbaremetal nodes are provisioned. The provisioningIP and the\nIPs in the dhcpRange all come from within this network. When using IPv6\nand in a network managed by the Baremetal IPI solution this cannot be a\nnetwork larger than a /64.",
          "type": "string"
        },
        "provisioningOSDownloadURL": {
          "description": "ProvisioningOSDownloadURL is the location from which the OS\nImage used to boot baremetal host machines can be downloaded\nby the metal3 cluster.",
          "type": "string"
        },
        "virtualMediaViaExternalNetwork": {
          "description": "VirtualMediaViaExternalNetwork flag when set to \"true\" allows for workers\nto boot via Virtual Media and contact metal3 over the External Network.\nWhen the flag is set to \"false\" (which is the default), virtual media\ndeployments can still happen based on the configuration specified in the\nProvisioningNetwork i.e when in Disabled mode, over the External Network\nand over Provisioning Network when in Managed mode.\nPXE deployments will always use the Provisioning Network and will not be\naffected by this flag.",
          "type": "boolean"
        },
        "watchAllNamespaces": {
          "description": "WatchAllNamespaces provides a way to explicitly allow use of this\nProvisioning configuration across all Namespaces. It is an\noptional configuration which defaults to false and in that state\nwill be used to provision baremetal hosts in only the\nopenshift-machine-api namespace. When set to true, this provisioning\nconfiguration would be used for baremetal hosts across all namespaces.",
          "type": "boolean"
        }
      }
    },
    "status": {
      "description": "ProvisioningStatus defines the observed state of Provisioning",
      "type": "object",
      "properties": {
        "conditions": {
          "description": "conditions is a list of conditions and their status",
          "type": "array",
          "items": {
            "description": "OperatorCondition is just the standard condition fields.",
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "type": "string"
              },
              "reason": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "generations": {
          "description": "generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.",
          "type": "array",
          "items": {
            "description": "GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.",
            "type": "object",
            "properties": {
              "group": {
                "description": "group is the group of the thing you're tracking",
                "type": "string"
              },
              "hash": {
                "description": "hash is an optional field set for resources without generation that are content sensitive like secrets and configmaps",
                "type": "string"
              },
              "lastGeneration": {
                "description": "lastGeneration is the last generation of the workload controller involved",
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "description": "name is the name of the thing you're tracking",
                "type": "string"
              },
              "namespace": {
                "description": "namespace is where the thing you're tracking is",
                "type": "string"
              },
              "resource": {
                "description": "resource is the resource type of the thing you're tracking",
                "type": "string"
              }
            }
          },
          "x-kubernetes-list-type": "atomic"
        },
        "observedGeneration": {
          "description": "observedGeneration is the last generation change you've dealt with",
          "type": "integer",
          "format": "int64"
        },
        "readyReplicas": {
          "description": "readyReplicas indicates how many replicas are ready and at the desired state",
          "type": "integer",
          "format": "int32"
        },
        "version": {
          "description": "version is the level this availability applies to",
          "type": "string"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "metal3.io",
      "kind": "Provisioning",
      "version": "v1alpha1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}