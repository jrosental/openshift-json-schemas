{
  "description": "RepositoryList is a list of Repository",
  "type": "object",
  "required": [
    "items"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "items": {
      "description": "List of repositories. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md",
      "type": "array",
      "items": {
        "description": "Repository is the representation of a Git repository from a Git provider platform.",
        "type": "object",
        "required": [
          "spec"
        ],
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
            "type": "object",
            "properties": {
              "annotations": {
                "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "creationTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "deletionGracePeriodSeconds": {
                "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "deletionTimestamp": {
                "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                "type": "string",
                "format": "date-time"
              },
              "finalizers": {
                "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "x-kubernetes-list-type": "set",
                "x-kubernetes-patch-strategy": "merge"
              },
              "generateName": {
                "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
                "type": "string"
              },
              "generation": {
                "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
                "type": "integer",
                "format": "int64"
              },
              "labels": {
                "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "managedFields": {
                "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
                "type": "array",
                "items": {
                  "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
                  "type": "object",
                  "properties": {
                    "apiVersion": {
                      "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
                      "type": "string"
                    },
                    "fieldsType": {
                      "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
                      "type": "string"
                    },
                    "fieldsV1": {
                      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
                      "type": "object"
                    },
                    "manager": {
                      "description": "Manager is an identifier of the workflow managing these fields.",
                      "type": "string"
                    },
                    "operation": {
                      "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
                      "type": "string"
                    },
                    "subresource": {
                      "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
                      "type": "string"
                    },
                    "time": {
                      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "x-kubernetes-list-type": "atomic"
              },
              "name": {
                "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                "type": "string"
              },
              "namespace": {
                "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
                "type": "string"
              },
              "ownerReferences": {
                "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
                "type": "array",
                "items": {
                  "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
                  "type": "object",
                  "required": [
                    "apiVersion",
                    "kind",
                    "name",
                    "uid"
                  ],
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent.",
                      "type": "string"
                    },
                    "blockOwnerDeletion": {
                      "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
                      "type": "boolean"
                    },
                    "controller": {
                      "description": "If true, this reference points to the managing controller.",
                      "type": "boolean"
                    },
                    "kind": {
                      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
                      "type": "string"
                    },
                    "uid": {
                      "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                      "type": "string"
                    }
                  },
                  "x-kubernetes-map-type": "atomic"
                },
                "x-kubernetes-list-map-keys": [
                  "uid"
                ],
                "x-kubernetes-list-type": "map",
                "x-kubernetes-patch-merge-key": "uid",
                "x-kubernetes-patch-strategy": "merge"
              },
              "resourceVersion": {
                "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": "string"
              },
              "selfLink": {
                "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
                "type": "string"
              },
              "uid": {
                "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
                "type": "string"
              }
            }
          },
          "pipelinerun_status": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "annotations": {
                  "description": "Annotations is additional Status fields for the Resource to save some\nadditional State as well as convey more information to the user. This is\nroughly akin to Annotations on any k8s resource, just the reconciler conveying\nricher information outwards.",
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "completionTime": {
                  "description": "CompletionTime is the time the PipelineRun completed.",
                  "type": "string",
                  "format": "date-time"
                },
                "conditions": {
                  "description": "Conditions the latest available observations of a resource's current state.",
                  "type": "array",
                  "items": {
                    "description": "Condition defines a readiness condition for a Knative resource.\nSee: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#typical-status-properties",
                    "type": "object",
                    "required": [
                      "status",
                      "type"
                    ],
                    "properties": {
                      "lastTransitionTime": {
                        "description": "LastTransitionTime is the last time the condition transitioned from one status to another.\nWe use VolatileTime in place of metav1.Time to exclude this from creating equality.Semantic\ndifferences (all other things held constant).",
                        "type": "string"
                      },
                      "message": {
                        "description": "A human readable message indicating details about the transition.",
                        "type": "string"
                      },
                      "reason": {
                        "description": "The reason for the condition's last transition.",
                        "type": "string"
                      },
                      "severity": {
                        "description": "Severity with which to treat failures of this type of condition.\nWhen this is not specified, it defaults to Error.",
                        "type": "string"
                      },
                      "status": {
                        "description": "Status of the condition, one of True, False, Unknown.",
                        "type": "string"
                      },
                      "type": {
                        "description": "Type of condition.",
                        "type": "string"
                      }
                    }
                  }
                },
                "event_type": {
                  "description": "EventType is the event type of that run",
                  "type": "string"
                },
                "failure_reason": {
                  "description": "CollectedTaskInfos is the information about tasks",
                  "type": "object",
                  "additionalProperties": {
                    "description": "TaskInfos contains information about a task.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "completion_time": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "display_name": {
                        "type": "string"
                      },
                      "log_snippet": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "reason": {
                        "type": "string"
                      }
                    }
                  }
                },
                "logurl": {
                  "description": "LogURL is the full URL to the log for this run.",
                  "type": "string"
                },
                "observedGeneration": {
                  "description": "ObservedGeneration is the 'Generation' of the Service that\nwas last processed by the controller.",
                  "type": "integer",
                  "format": "int64"
                },
                "pipelineRunName": {
                  "description": "PipelineRunName is the name of the PipelineRun",
                  "type": "string"
                },
                "sha": {
                  "description": "SHA is the name of the SHA that has been tested",
                  "type": "string"
                },
                "sha_url": {
                  "description": "SHA the URL of the SHA to view it",
                  "type": "string"
                },
                "startTime": {
                  "description": "StartTime is the time the PipelineRun is actually started.",
                  "type": "string",
                  "format": "date-time"
                },
                "target_branch": {
                  "description": "TargetBranch is the target branch of that run",
                  "type": "string"
                },
                "title": {
                  "description": "Title is the title of the commit SHA that has been tested",
                  "type": "string"
                }
              }
            }
          },
          "spec": {
            "description": "RepositorySpec defines the desired state of a Repository, including its URL,\nGit provider configuration, and operational settings.",
            "type": "object",
            "properties": {
              "concurrency_limit": {
                "description": "ConcurrencyLimit defines the maximum number of concurrent pipelineruns that can\nrun for this repository. This helps prevent resource exhaustion when many events trigger\npipelines simultaneously.",
                "type": "integer",
                "minimum": 1
              },
              "git_provider": {
                "description": "GitProvider details specific to a git provider configuration. Contains authentication,\nAPI endpoints, and provider type information needed to interact with the Git service.",
                "type": "object",
                "properties": {
                  "secret": {
                    "description": "Secret reference for authentication with the Git provider. Contains the token,\npassword, or private key used to authenticate requests to the Git provider API.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "key": {
                        "description": "Key in the secret",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret",
                        "type": "string"
                      }
                    }
                  },
                  "type": {
                    "description": "Type of git provider. Determines which Git provider API and authentication flow to use.\nSupported values:\n- 'github': GitHub.com or GitHub Enterprise\n- 'gitlab': GitLab.com or self-hosted GitLab\n- 'bitbucket-datacenter': Bitbucket Data Center (self-hosted)\n- 'bitbucket-cloud': Bitbucket Cloud (bitbucket.org)\n- 'gitea': Gitea instances",
                    "type": "string",
                    "enum": [
                      "github",
                      "gitlab",
                      "bitbucket-datacenter",
                      "bitbucket-cloud",
                      "gitea"
                    ]
                  },
                  "url": {
                    "description": "URL of the git provider API endpoint. This is the base URL for API requests to the\nGit provider (e.g., 'https://api.github.com' for GitHub or a custom GitLab instance URL).",
                    "type": "string"
                  },
                  "user": {
                    "description": "User of the git provider. Username to use for authentication when using basic auth\nor token-based authentication methods. Not used for GitHub Apps authentication.",
                    "type": "string"
                  },
                  "webhook_secret": {
                    "description": "WebhookSecret reference for webhook validation. Contains the shared secret used to\nvalidate that incoming webhooks are legitimate and coming from the Git provider.",
                    "type": "object",
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "key": {
                        "description": "Key in the secret",
                        "type": "string"
                      },
                      "name": {
                        "description": "Name of the secret",
                        "type": "string"
                      }
                    }
                  }
                }
              },
              "incoming": {
                "description": "Incomings defines incoming webhook configurations. Each configuration specifies how to\nhandle external webhook requests that don't come directly from the primary Git provider.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "secret",
                    "type"
                  ],
                  "properties": {
                    "params": {
                      "description": "Params defines parameter names to extract from the webhook payload. These parameters\nwill be made available to the PipelineRuns triggered by this webhook.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "secret": {
                      "description": "Secret for the incoming webhook authentication. This secret is used to validate\nthat webhook requests are coming from authorized sources.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "key": {
                          "description": "Key in the secret",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the secret",
                          "type": "string"
                        }
                      }
                    },
                    "targets": {
                      "description": "Targets defines target branches for this webhook. When specified, only webhook\nevents targeting these branches will trigger PipelineRuns.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "type": {
                      "description": "Type of the incoming webhook. Currently only 'webhook-url' is supported, which allows\nexternal systems to trigger PipelineRuns via generic webhook requests.",
                      "type": "string",
                      "enum": [
                        "webhook-url"
                      ]
                    }
                  }
                }
              },
              "params": {
                "description": "Params defines repository level parameters that can be referenced in PipelineRuns.\nThese parameters can be used as default values or configured for specific events.",
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "filter": {
                      "description": "Filter defines when this parameter applies. It can be used to conditionally\napply parameters based on the event type, branch name, or other attributes.",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the parameter. This is the key that will be used to reference this parameter\nin PipelineRun definitions through via the {{ name }} syntax.",
                      "type": "string"
                    },
                    "secret_ref": {
                      "description": "SecretRef references a secret for the parameter value. Use this when the parameter\ncontains sensitive information that should not be stored directly in the Repository CR.\nThis field is mutually exclusive with Value.",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "key": {
                          "description": "Key in the secret",
                          "type": "string"
                        },
                        "name": {
                          "description": "Name of the secret",
                          "type": "string"
                        }
                      }
                    },
                    "value": {
                      "description": "Value of the parameter. The literal value to be provided to the PipelineRun.\nThis field is mutually exclusive with SecretRef.",
                      "type": "string"
                    }
                  }
                }
              },
              "settings": {
                "description": "Settings contains the configuration settings for the repository, including\nauthorization policies, provider-specific configuration, and provenance settings.",
                "type": "object",
                "properties": {
                  "github_app_token_scope_repos": {
                    "description": "GithubAppTokenScopeRepos lists repositories that can access the GitHub App token when using the\nGitHub App authentication method. This allows specific repositories to use tokens generated for\nthe GitHub App installation, useful for cross-repository access.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "gitlab": {
                    "description": "Gitlab contains GitLab-specific settings for repositories hosted on GitLab.",
                    "type": "object",
                    "properties": {
                      "comment_strategy": {
                        "description": "CommentStrategy defines how GitLab comments are handled for pipeline results.\nOptions:\n- 'status-comment': Posts a single comment and updates it with pipeline results\n- 'pipeline-runs-comment': Creates a new comment for each PipelineRun\n- 'disable_all': Disables all comments on merge requests",
                        "type": "string",
                        "enum": [
                          "status-comment",
                          "pipeline-runs-comment",
                          "disable_all"
                        ]
                      }
                    }
                  },
                  "pipelinerun_provenance": {
                    "description": "PipelineRunProvenance configures how PipelineRun definitions are fetched.\nOptions:\n- 'source': Fetch definitions from the event source branch/SHA (default)\n- 'default_branch': Fetch definitions from the repository default branch",
                    "type": "string",
                    "enum": [
                      "source",
                      "default_branch"
                    ]
                  },
                  "policy": {
                    "description": "Policy defines authorization policies for the repository, controlling who can\ntrigger PipelineRuns under different conditions.",
                    "type": "object",
                    "properties": {
                      "ok_to_test": {
                        "description": "OkToTest defines a list of usernames that are allowed to trigger pipeline runs on pull requests\nfrom external contributors by commenting \"/ok-to-test\" on the PR. These users are typically\nrepository maintainers or trusted contributors who can vouch for external contributions.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "pull_request": {
                        "description": "PullRequest defines a list of usernames that are explicitly allowed to execute\npipelines on their pull requests, even if they wouldn't normally have permission.\nThis is useful for allowing specific external contributors to trigger pipeline runs.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "url": {
                "description": "URL of the repository we are building. Must be a valid HTTP/HTTPS Git repository URL\nthat PAC will use to clone and fetch pipeline definitions from.",
                "type": "string"
              }
            }
          }
        },
        "x-kubernetes-group-version-kind": [
          {
            "group": "pipelinesascode.tekton.dev",
            "kind": "Repository",
            "version": "v1alpha1"
          }
        ],
        "x-kubernetes-selectable-fields": []
      }
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": "object",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
          "type": "integer",
          "format": "int64"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "pipelinesascode.tekton.dev",
      "kind": "RepositoryList",
      "version": "v1alpha1"
    }
  ],
  "x-kubernetes-selectable-fields": [],
  "$schema": "http://json-schema.org/schema#"
}