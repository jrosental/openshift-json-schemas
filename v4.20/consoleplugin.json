{
  "description": "ConsolePlugin is an extension for customizing OpenShift web console by\ndynamically loading code from another service running on the cluster.\n\nCompatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).",
  "type": "object",
  "required": [
    "metadata",
    "spec"
  ],
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "ConsolePlugin"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "https://raw.githubusercontent.com/melmorabity/openshift-json-schemas/main/v4.20/_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "spec contains the desired configuration for the console plugin.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "backend",
        "displayName"
      ],
      "properties": {
        "backend": {
          "description": "backend holds the configuration of backend which is serving console's plugin .",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "service": {
              "description": "service is a Kubernetes Service that exposes the plugin using a\ndeployment with an HTTP server. The Service must use HTTPS and\nService serving certificate. The console backend will proxy the\nplugins assets from the Service using the service CA bundle.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "name",
                "namespace",
                "port"
              ],
              "properties": {
                "basePath": {
                  "description": "basePath is the path to the plugin's assets. The primary asset it the\nmanifest file called `plugin-manifest.json`, which is a JSON document\nthat contains metadata about the plugin and the extensions.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "maxLength": 256,
                  "minLength": 1,
                  "pattern": "^[a-zA-Z0-9.\\-_~!$&'()*+,;=:@\\/]*$"
                },
                "name": {
                  "description": "name of Service that is serving the plugin assets.",
                  "type": "string",
                  "maxLength": 128,
                  "minLength": 1
                },
                "namespace": {
                  "description": "namespace of Service that is serving the plugin assets.",
                  "type": "string",
                  "maxLength": 128,
                  "minLength": 1
                },
                "port": {
                  "description": "port on which the Service that is serving the plugin is listening to.",
                  "type": "integer",
                  "format": "int32",
                  "maximum": 65535,
                  "minimum": 1
                }
              }
            },
            "type": {
              "description": "type is the backend type which servers the console's plugin. Currently only \"Service\" is supported.\n",
              "type": "string",
              "enum": [
                "Service"
              ]
            }
          }
        },
        "contentSecurityPolicy": {
          "description": "contentSecurityPolicy is a list of Content-Security-Policy (CSP) directives for the plugin.\nEach directive specifies a list of values, appropriate for the given directive type,\nfor example a list of remote endpoints for fetch directives such as ScriptSrc.\nConsole web application uses CSP to detect and mitigate certain types of attacks,\nsuch as cross-site scripting (XSS) and data injection attacks.\nDynamic plugins should specify this field if need to load assets from outside\nthe cluster or if violation reports are observed. Dynamic plugins should always prefer\nloading their assets from within the cluster, either by vendoring them, or fetching\nfrom a cluster service.\nCSP violation reports can be viewed in the browser's console logs during development and\ntesting of the plugin in the OpenShift web console.\nAvailable directive types are DefaultSrc, ScriptSrc, StyleSrc, ImgSrc, FontSrc and ConnectSrc.\nEach of the available directives may be defined only once in the list.\nThe value 'self' is automatically included in all fetch directives by the OpenShift web\nconsole's backend.\nFor more information about the CSP directives, see:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\n\nThe OpenShift web console server aggregates the CSP directives and values across\nits own default values and all enabled ConsolePlugin CRs, merging them into a single\npolicy string that is sent to the browser via `Content-Security-Policy` HTTP response header.\n\nExample:\n  ConsolePlugin A directives:\n    script-src: https://script1.com/, https://script2.com/\n    font-src: https://font1.com/\n\n  ConsolePlugin B directives:\n    script-src: https://script2.com/, https://script3.com/\n    font-src: https://font2.com/\n    img-src: https://img1.com/\n\n  Unified set of CSP directives, passed to the OpenShift web console server:\n    script-src: https://script1.com/, https://script2.com/, https://script3.com/\n    font-src: https://font1.com/, https://font2.com/\n    img-src: https://img1.com/\n\n  OpenShift web console server CSP response header:\n    Content-Security-Policy: default-src 'self'; base-uri 'self'; script-src 'self' https://script1.com/ https://script2.com/ https://script3.com/; font-src 'self' https://font1.com/ https://font2.com/; img-src 'self' https://img1.com/; style-src 'self'; frame-src 'none'; object-src 'none'",
          "type": [
            "array",
            "null"
          ],
          "maxItems": 5,
          "items": {
            "description": "ConsolePluginCSP holds configuration for a specific CSP directive",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "directive",
              "values"
            ],
            "properties": {
              "directive": {
                "description": "directive specifies which Content-Security-Policy directive to configure.\nAvailable directive types are DefaultSrc, ScriptSrc, StyleSrc, ImgSrc, FontSrc and ConnectSrc.\nDefaultSrc directive serves as a fallback for the other CSP fetch directives.\nFor more information about the DefaultSrc directive, see:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/default-src\nScriptSrc directive specifies valid sources for JavaScript.\nFor more information about the ScriptSrc directive, see:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src\nStyleSrc directive specifies valid sources for stylesheets.\nFor more information about the StyleSrc directive, see:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/style-src\nImgSrc directive specifies a valid sources of images and favicons.\nFor more information about the ImgSrc directive, see:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/img-src\nFontSrc directive specifies valid sources for fonts loaded using @font-face.\nFor more information about the FontSrc directive, see:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/font-src\nConnectSrc directive restricts the URLs which can be loaded using script interfaces.\nFor more information about the ConnectSrc directive, see:\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/connect-src",
                "type": "string",
                "enum": [
                  "DefaultSrc",
                  "ScriptSrc",
                  "StyleSrc",
                  "ImgSrc",
                  "FontSrc",
                  "ConnectSrc"
                ]
              },
              "values": {
                "description": "values defines an array of values to append to the console defaults for this directive.\nEach ConsolePlugin may define their own directives with their values. These will be set\nby the OpenShift web console's backend, as part of its Content-Security-Policy header.\nThe array can contain at most 16 values. Each directive value must have a maximum length\nof 1024 characters and must not contain whitespace, commas (,), semicolons (;) or single\nquotes ('). The value '*' is not permitted.\nEach value in the array must be unique.",
                "type": "array",
                "maxItems": 16,
                "minItems": 1,
                "items": {
                  "description": "CSPDirectiveValue is single value for a Content-Security-Policy directive.\nEach directive value must have a maximum length of 1024 characters and must not contain\nwhitespace, commas (,), semicolons (;) or single quotes ('). The value '*' is not permitted.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "maxLength": 1024,
                  "minLength": 1,
                  "x-kubernetes-validations": [
                    {
                      "message": "CSP directive value cannot contain a quote",
                      "rule": "!self.contains(\"'\")"
                    },
                    {
                      "message": "CSP directive value cannot contain a whitespace",
                      "rule": "!self.matches('\\\\s')"
                    },
                    {
                      "message": "CSP directive value cannot contain a comma",
                      "rule": "!self.contains(',')"
                    },
                    {
                      "message": "CSP directive value cannot contain a semi-colon",
                      "rule": "!self.contains(';')"
                    },
                    {
                      "message": "CSP directive value cannot be a wildcard",
                      "rule": "self != '*'"
                    }
                  ]
                },
                "x-kubernetes-list-type": "atomic",
                "x-kubernetes-validations": [
                  {
                    "message": "each CSP directive value must be unique",
                    "rule": "self.all(x, self.exists_one(y, x == y))"
                  }
                ]
              }
            }
          },
          "x-kubernetes-list-map-keys": [
            "directive"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-validations": [
            {
              "message": "the total combined size of values of all directives must not exceed 8192 (8kb)",
              "rule": "self.map(x, x.values.map(y, y.size()).sum()).sum() < 8192"
            }
          ]
        },
        "displayName": {
          "description": "displayName is the display name of the plugin.\nThe dispalyName should be between 1 and 128 characters.",
          "type": "string",
          "maxLength": 128,
          "minLength": 1
        },
        "i18n": {
          "description": "i18n is the configuration of plugin's localization resources.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "loadType"
          ],
          "properties": {
            "loadType": {
              "description": "loadType indicates how the plugin's localization resource should be loaded.\nValid values are Preload, Lazy and the empty string.\nWhen set to Preload, all localization resources are fetched when the plugin is loaded.\nWhen set to Lazy, localization resources are lazily loaded as and when they are required by the console.\nWhen omitted or set to the empty string, the behaviour is equivalent to Lazy type.",
              "type": "string",
              "enum": [
                "Preload",
                "Lazy",
                ""
              ]
            }
          }
        },
        "proxy": {
          "description": "proxy is a list of proxies that describe various service type\nto which the plugin needs to connect to.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ConsolePluginProxy holds information on various service types\nto which console's backend will proxy the plugin's requests.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "alias",
              "endpoint"
            ],
            "properties": {
              "alias": {
                "description": "alias is a proxy name that identifies the plugin's proxy. An alias name\nshould be unique per plugin. The console backend exposes following\nproxy endpoint:\n\n/api/proxy/plugin/<plugin-name>/<proxy-alias>/<request-path>?<optional-query-parameters>\n\nRequest example path:\n\n/api/proxy/plugin/acm/search/pods?namespace=openshift-apiserver",
                "type": "string",
                "maxLength": 128,
                "minLength": 1,
                "pattern": "^[A-Za-z0-9-_]+$"
              },
              "authorization": {
                "description": "authorization provides information about authorization type,\nwhich the proxied request should contain",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "UserToken",
                  "None"
                ]
              },
              "caCertificate": {
                "description": "caCertificate provides the cert authority certificate contents,\nin case the proxied Service is using custom service CA.\nBy default, the service CA bundle provided by the service-ca operator is used.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^-----BEGIN CERTIFICATE-----([\\s\\S]*)-----END CERTIFICATE-----\\s?$"
              },
              "endpoint": {
                "description": "endpoint provides information about endpoint to which the request is proxied to.",
                "type": "object",
                "required": [
                  "type"
                ],
                "properties": {
                  "service": {
                    "description": "service is an in-cluster Service that the plugin will connect to.\nThe Service must use HTTPS. The console backend exposes an endpoint\nin order to proxy communication between the plugin and the Service.\nNote: service field is required for now, since currently only \"Service\"\ntype is supported.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name",
                      "namespace",
                      "port"
                    ],
                    "properties": {
                      "name": {
                        "description": "name of Service that the plugin needs to connect to.",
                        "type": "string",
                        "maxLength": 128,
                        "minLength": 1
                      },
                      "namespace": {
                        "description": "namespace of Service that the plugin needs to connect to",
                        "type": "string",
                        "maxLength": 128,
                        "minLength": 1
                      },
                      "port": {
                        "description": "port on which the Service that the plugin needs to connect to\nis listening on.",
                        "type": "integer",
                        "format": "int32",
                        "maximum": 65535,
                        "minimum": 1
                      }
                    }
                  },
                  "type": {
                    "description": "type is the type of the console plugin's proxy. Currently only \"Service\" is supported.\n",
                    "type": "string",
                    "enum": [
                      "Service"
                    ]
                  }
                }
              }
            }
          },
          "x-kubernetes-list-type": "atomic"
        }
      }
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "console.openshift.io",
      "kind": "ConsolePlugin",
      "version": "v1"
    }
  ],
  "$schema": "http://json-schema.org/schema#"
}